{"version":3,"sources":["../src/index.ts","../src/messages/embed/Assertions.ts","../src/util/validation.ts","../src/util/normalizeArray.ts","../src/messages/embed/Embed.ts","../src/components/Assertions.ts","../src/components/selectMenu/StringSelectMenuOption.ts","../src/components/ActionRow.ts","../src/components/Component.ts","../src/components/Components.ts","../src/components/button/Button.ts","../src/components/selectMenu/ChannelSelectMenu.ts","../src/components/selectMenu/BaseSelectMenu.ts","../src/components/selectMenu/MentionableSelectMenu.ts","../src/components/selectMenu/RoleSelectMenu.ts","../src/components/selectMenu/StringSelectMenu.ts","../src/components/selectMenu/UserSelectMenu.ts","../src/components/textInput/TextInput.ts","../src/components/textInput/Assertions.ts","../src/interactions/modals/Assertions.ts","../src/interactions/modals/Modal.ts","../src/interactions/slashCommands/Assertions.ts","../src/interactions/slashCommands/SlashCommandBuilder.ts","../src/interactions/slashCommands/SlashCommandSubcommands.ts","../src/interactions/slashCommands/mixins/NameAndDescription.ts","../src/interactions/slashCommands/options/attachment.ts","../src/interactions/slashCommands/mixins/ApplicationCommandOptionBase.ts","../src/interactions/slashCommands/options/boolean.ts","../src/interactions/slashCommands/options/channel.ts","../src/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.ts","../src/interactions/slashCommands/options/integer.ts","../src/interactions/slashCommands/mixins/ApplicationCommandNumericOptionMinMaxValueMixin.ts","../src/interactions/slashCommands/mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin.ts","../src/interactions/slashCommands/options/mentionable.ts","../src/interactions/slashCommands/options/number.ts","../src/interactions/slashCommands/options/role.ts","../src/interactions/slashCommands/options/string.ts","../src/interactions/slashCommands/options/user.ts","../src/interactions/slashCommands/mixins/SharedSlashCommandOptions.ts","../src/interactions/contextMenuCommands/Assertions.ts","../src/interactions/contextMenuCommands/ContextMenuCommandBuilder.ts","../src/util/componentUtil.ts"],"sourcesContent":["export * as EmbedAssertions from './messages/embed/Assertions.js';\nexport * from './messages/embed/Embed.js';\n// TODO: Consider removing this dep in the next major version\nexport * from '@discordjs/formatters';\n\nexport * as ComponentAssertions from './components/Assertions.js';\nexport * from './components/ActionRow.js';\nexport * from './components/button/Button.js';\nexport * from './components/Component.js';\nexport * from './components/Components.js';\nexport * from './components/textInput/TextInput.js';\nexport * as TextInputAssertions from './components/textInput/Assertions.js';\nexport * from './interactions/modals/Modal.js';\nexport * as ModalAssertions from './interactions/modals/Assertions.js';\n\nexport * from './components/selectMenu/BaseSelectMenu.js';\nexport * from './components/selectMenu/ChannelSelectMenu.js';\nexport * from './components/selectMenu/MentionableSelectMenu.js';\nexport * from './components/selectMenu/RoleSelectMenu.js';\nexport * from './components/selectMenu/StringSelectMenu.js';\n// TODO: Remove those aliases in v2\nexport {\n\t/**\n\t * @deprecated Will be removed in the next major version, use {@link StringSelectMenuBuilder} instead.\n\t */\n\tStringSelectMenuBuilder as SelectMenuBuilder,\n} from './components/selectMenu/StringSelectMenu.js';\nexport {\n\t/**\n\t * @deprecated Will be removed in the next major version, use {@link StringSelectMenuOptionBuilder} instead.\n\t */\n\tStringSelectMenuOptionBuilder as SelectMenuOptionBuilder,\n} from './components/selectMenu/StringSelectMenuOption.js';\nexport * from './components/selectMenu/StringSelectMenuOption.js';\nexport * from './components/selectMenu/UserSelectMenu.js';\n\nexport * as SlashCommandAssertions from './interactions/slashCommands/Assertions.js';\nexport * from './interactions/slashCommands/SlashCommandBuilder.js';\nexport * from './interactions/slashCommands/SlashCommandSubcommands.js';\nexport * from './interactions/slashCommands/options/boolean.js';\nexport * from './interactions/slashCommands/options/channel.js';\nexport * from './interactions/slashCommands/options/integer.js';\nexport * from './interactions/slashCommands/options/mentionable.js';\nexport * from './interactions/slashCommands/options/number.js';\nexport * from './interactions/slashCommands/options/role.js';\nexport * from './interactions/slashCommands/options/attachment.js';\nexport * from './interactions/slashCommands/options/string.js';\nexport * from './interactions/slashCommands/options/user.js';\nexport * from './interactions/slashCommands/mixins/ApplicationCommandNumericOptionMinMaxValueMixin.js';\nexport * from './interactions/slashCommands/mixins/ApplicationCommandOptionBase.js';\nexport * from './interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.js';\nexport * from './interactions/slashCommands/mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin.js';\nexport * from './interactions/slashCommands/mixins/NameAndDescription.js';\nexport * from './interactions/slashCommands/mixins/SharedSlashCommandOptions.js';\n\nexport * as ContextMenuCommandAssertions from './interactions/contextMenuCommands/Assertions.js';\nexport * from './interactions/contextMenuCommands/ContextMenuCommandBuilder.js';\n\nexport * from './util/componentUtil.js';\nexport * from './util/normalizeArray.js';\nexport * from './util/validation.js';\nexport * from '@discordjs/util';\n\n/**\n * The {@link https://github.com/discordjs/discord.js/blob/main/packages/builders/#readme | @discordjs/builders} version\n * that you are currently using.\n */\n// This needs to explicitly be `string` so it is not typed as a \"const string\" that gets injected by esbuild\nexport const version = '1.6.1' as string;\n","import { s } from '@sapphire/shapeshift';\nimport type { APIEmbedField } from 'discord-api-types/v10';\nimport { isValidationEnabled } from '../../util/validation.js';\n\nexport const fieldNamePredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(256)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const fieldValuePredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(1_024)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const fieldInlinePredicate = s.boolean.optional;\n\nexport const embedFieldPredicate = s\n\t.object({\n\t\tname: fieldNamePredicate,\n\t\tvalue: fieldValuePredicate,\n\t\tinline: fieldInlinePredicate,\n\t})\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const embedFieldsArrayPredicate = embedFieldPredicate.array.setValidationEnabled(isValidationEnabled);\n\nexport const fieldLengthPredicate = s.number.lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\n\nexport function validateFieldLength(amountAdding: number, fields?: APIEmbedField[]): void {\n\tfieldLengthPredicate.parse((fields?.length ?? 0) + amountAdding);\n}\n\nexport const authorNamePredicate = fieldNamePredicate.nullable.setValidationEnabled(isValidationEnabled);\n\nexport const imageURLPredicate = s.string\n\t.url({\n\t\tallowedProtocols: ['http:', 'https:', 'attachment:'],\n\t})\n\t.nullish.setValidationEnabled(isValidationEnabled);\n\nexport const urlPredicate = s.string\n\t.url({\n\t\tallowedProtocols: ['http:', 'https:'],\n\t})\n\t.nullish.setValidationEnabled(isValidationEnabled);\n\nexport const embedAuthorPredicate = s\n\t.object({\n\t\tname: authorNamePredicate,\n\t\ticonURL: imageURLPredicate,\n\t\turl: urlPredicate,\n\t})\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const RGBPredicate = s.number.int\n\t.greaterThanOrEqual(0)\n\t.lessThanOrEqual(255)\n\t.setValidationEnabled(isValidationEnabled);\nexport const colorPredicate = s.number.int\n\t.greaterThanOrEqual(0)\n\t.lessThanOrEqual(0xffffff)\n\t.or(s.tuple([RGBPredicate, RGBPredicate, RGBPredicate]))\n\t.nullable.setValidationEnabled(isValidationEnabled);\n\nexport const descriptionPredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(4_096)\n\t.nullable.setValidationEnabled(isValidationEnabled);\n\nexport const footerTextPredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(2_048)\n\t.nullable.setValidationEnabled(isValidationEnabled);\n\nexport const embedFooterPredicate = s\n\t.object({\n\t\ttext: footerTextPredicate,\n\t\ticonURL: imageURLPredicate,\n\t})\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const timestampPredicate = s.union(s.number, s.date).nullable.setValidationEnabled(isValidationEnabled);\n\nexport const titlePredicate = fieldNamePredicate.nullable.setValidationEnabled(isValidationEnabled);\n","let validate = true;\n\nexport const enableValidators = () => (validate = true);\nexport const disableValidators = () => (validate = false);\nexport const isValidationEnabled = () => validate;\n","export function normalizeArray<T>(arr: RestOrArray<T>): T[] {\n\tif (Array.isArray(arr[0])) return arr[0];\n\treturn arr as T[];\n}\n\nexport type RestOrArray<T> = T[] | [T[]];\n","import type { APIEmbed, APIEmbedAuthor, APIEmbedField, APIEmbedFooter, APIEmbedImage } from 'discord-api-types/v10';\nimport { normalizeArray, type RestOrArray } from '../../util/normalizeArray.js';\nimport {\n\tcolorPredicate,\n\tdescriptionPredicate,\n\tembedAuthorPredicate,\n\tembedFieldsArrayPredicate,\n\tembedFooterPredicate,\n\timageURLPredicate,\n\ttimestampPredicate,\n\ttitlePredicate,\n\turlPredicate,\n\tvalidateFieldLength,\n} from './Assertions.js';\n\nexport type RGBTuple = [red: number, green: number, blue: number];\n\nexport interface IconData {\n\t/**\n\t * The URL of the icon\n\t */\n\ticonURL?: string;\n\t/**\n\t * The proxy URL of the icon\n\t */\n\tproxyIconURL?: string;\n}\n\nexport type EmbedAuthorData = IconData & Omit<APIEmbedAuthor, 'icon_url' | 'proxy_icon_url'>;\n\nexport type EmbedAuthorOptions = Omit<EmbedAuthorData, 'proxyIconURL'>;\n\nexport type EmbedFooterData = IconData & Omit<APIEmbedFooter, 'icon_url' | 'proxy_icon_url'>;\n\nexport type EmbedFooterOptions = Omit<EmbedFooterData, 'proxyIconURL'>;\n\nexport interface EmbedImageData extends Omit<APIEmbedImage, 'proxy_url'> {\n\t/**\n\t * The proxy URL for the image\n\t */\n\tproxyURL?: string;\n}\n/**\n * Represents a embed in a message (image/video preview, rich embed, etc.)\n */\nexport class EmbedBuilder {\n\tpublic readonly data: APIEmbed;\n\n\tpublic constructor(data: APIEmbed = {}) {\n\t\tthis.data = { ...data };\n\t\tif (data.timestamp) this.data.timestamp = new Date(data.timestamp).toISOString();\n\t}\n\n\t/**\n\t * Appends fields to the embed\n\t *\n\t * @remarks\n\t * This method accepts either an array of fields or a variable number of field parameters.\n\t * The maximum amount of fields that can be added is 25.\n\t * @example\n\t * Using an array\n\t * ```ts\n\t * const fields: APIEmbedField[] = ...;\n\t * const embed = new EmbedBuilder()\n\t * \t.addFields(fields);\n\t * ```\n\t * @example\n\t * Using rest parameters (variadic)\n\t * ```ts\n\t * const embed = new EmbedBuilder()\n\t * \t.addFields(\n\t * \t\t{ name: 'Field 1', value: 'Value 1' },\n\t * \t\t{ name: 'Field 2', value: 'Value 2' },\n\t * \t);\n\t * ```\n\t * @param fields - The fields to add\n\t */\n\tpublic addFields(...fields: RestOrArray<APIEmbedField>): this {\n\t\t// eslint-disable-next-line no-param-reassign\n\t\tfields = normalizeArray(fields);\n\t\t// Ensure adding these fields won't exceed the 25 field limit\n\t\tvalidateFieldLength(fields.length, this.data.fields);\n\n\t\t// Data assertions\n\t\tembedFieldsArrayPredicate.parse(fields);\n\n\t\tif (this.data.fields) this.data.fields.push(...fields);\n\t\telse this.data.fields = fields;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes, replaces, or inserts fields in the embed.\n\t *\n\t * @remarks\n\t * This method behaves similarly\n\t * to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice | Array.prototype.splice}.\n\t * The maximum amount of fields that can be added is 25.\n\t *\n\t * It's useful for modifying and adjusting order of the already-existing fields of an embed.\n\t * @example\n\t * Remove the first field\n\t * ```ts\n\t * embed.spliceFields(0, 1);\n\t * ```\n\t * @example\n\t * Remove the first n fields\n\t * ```ts\n\t * const n = 4\n\t * embed.spliceFields(0, n);\n\t * ```\n\t * @example\n\t * Remove the last field\n\t * ```ts\n\t * embed.spliceFields(-1, 1);\n\t * ```\n\t * @param index - The index to start at\n\t * @param deleteCount - The number of fields to remove\n\t * @param fields - The replacing field objects\n\t */\n\tpublic spliceFields(index: number, deleteCount: number, ...fields: APIEmbedField[]): this {\n\t\t// Ensure adding these fields won't exceed the 25 field limit\n\t\tvalidateFieldLength(fields.length - deleteCount, this.data.fields);\n\n\t\t// Data assertions\n\t\tembedFieldsArrayPredicate.parse(fields);\n\t\tif (this.data.fields) this.data.fields.splice(index, deleteCount, ...fields);\n\t\telse this.data.fields = fields;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the embed's fields\n\t *\n\t * @remarks\n\t * This method is an alias for {@link EmbedBuilder.spliceFields}. More specifically,\n\t * it splices the entire array of fields, replacing them with the provided fields.\n\t *\n\t * You can set a maximum of 25 fields.\n\t * @param fields - The fields to set\n\t */\n\tpublic setFields(...fields: RestOrArray<APIEmbedField>) {\n\t\tthis.spliceFields(0, this.data.fields?.length ?? 0, ...normalizeArray(fields));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the author of this embed\n\t *\n\t * @param options - The options for the author\n\t */\n\n\tpublic setAuthor(options: EmbedAuthorOptions | null): this {\n\t\tif (options === null) {\n\t\t\tthis.data.author = undefined;\n\t\t\treturn this;\n\t\t}\n\n\t\t// Data assertions\n\t\tembedAuthorPredicate.parse(options);\n\n\t\tthis.data.author = { name: options.name, url: options.url, icon_url: options.iconURL };\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the color of this embed\n\t *\n\t * @param color - The color of the embed\n\t */\n\tpublic setColor(color: RGBTuple | number | null): this {\n\t\t// Data assertions\n\t\tcolorPredicate.parse(color);\n\n\t\tif (Array.isArray(color)) {\n\t\t\tconst [red, green, blue] = color;\n\t\t\tthis.data.color = (red << 16) + (green << 8) + blue;\n\t\t\treturn this;\n\t\t}\n\n\t\tthis.data.color = color ?? undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the description of this embed\n\t *\n\t * @param description - The description\n\t */\n\tpublic setDescription(description: string | null): this {\n\t\t// Data assertions\n\t\tdescriptionPredicate.parse(description);\n\n\t\tthis.data.description = description ?? undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the footer of this embed\n\t *\n\t * @param options - The options for the footer\n\t */\n\tpublic setFooter(options: EmbedFooterOptions | null): this {\n\t\tif (options === null) {\n\t\t\tthis.data.footer = undefined;\n\t\t\treturn this;\n\t\t}\n\n\t\t// Data assertions\n\t\tembedFooterPredicate.parse(options);\n\n\t\tthis.data.footer = { text: options.text, icon_url: options.iconURL };\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the image of this embed\n\t *\n\t * @param url - The URL of the image\n\t */\n\tpublic setImage(url: string | null): this {\n\t\t// Data assertions\n\t\timageURLPredicate.parse(url);\n\n\t\tthis.data.image = url ? { url } : undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the thumbnail of this embed\n\t *\n\t * @param url - The URL of the thumbnail\n\t */\n\tpublic setThumbnail(url: string | null): this {\n\t\t// Data assertions\n\t\timageURLPredicate.parse(url);\n\n\t\tthis.data.thumbnail = url ? { url } : undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the timestamp of this embed\n\t *\n\t * @param timestamp - The timestamp or date\n\t */\n\tpublic setTimestamp(timestamp: Date | number | null = Date.now()): this {\n\t\t// Data assertions\n\t\ttimestampPredicate.parse(timestamp);\n\n\t\tthis.data.timestamp = timestamp ? new Date(timestamp).toISOString() : undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the title of this embed\n\t *\n\t * @param title - The title\n\t */\n\tpublic setTitle(title: string | null): this {\n\t\t// Data assertions\n\t\ttitlePredicate.parse(title);\n\n\t\tthis.data.title = title ?? undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the URL of this embed\n\t *\n\t * @param url - The URL\n\t */\n\tpublic setURL(url: string | null): this {\n\t\t// Data assertions\n\t\turlPredicate.parse(url);\n\n\t\tthis.data.url = url ?? undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Transforms the embed to a plain object\n\t */\n\tpublic toJSON(): APIEmbed {\n\t\treturn { ...this.data };\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { ButtonStyle, ChannelType, type APIMessageComponentEmoji } from 'discord-api-types/v10';\nimport { isValidationEnabled } from '../util/validation.js';\nimport { StringSelectMenuOptionBuilder } from './selectMenu/StringSelectMenuOption.js';\n\nexport const customIdValidator = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(100)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const emojiValidator = s\n\t.object({\n\t\tid: s.string,\n\t\tname: s.string,\n\t\tanimated: s.boolean,\n\t})\n\t.partial.strict.setValidationEnabled(isValidationEnabled);\n\nexport const disabledValidator = s.boolean;\n\nexport const buttonLabelValidator = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(80)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const buttonStyleValidator = s.nativeEnum(ButtonStyle);\n\nexport const placeholderValidator = s.string.lengthLessThanOrEqual(150).setValidationEnabled(isValidationEnabled);\nexport const minMaxValidator = s.number.int\n\t.greaterThanOrEqual(0)\n\t.lessThanOrEqual(25)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const labelValueDescriptionValidator = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(100)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const jsonOptionValidator = s\n\t.object({\n\t\tlabel: labelValueDescriptionValidator,\n\t\tvalue: labelValueDescriptionValidator,\n\t\tdescription: labelValueDescriptionValidator.optional,\n\t\temoji: emojiValidator.optional,\n\t\tdefault: s.boolean.optional,\n\t})\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const optionValidator = s.instance(StringSelectMenuOptionBuilder).setValidationEnabled(isValidationEnabled);\n\nexport const optionsValidator = optionValidator.array\n\t.lengthGreaterThanOrEqual(0)\n\t.setValidationEnabled(isValidationEnabled);\nexport const optionsLengthValidator = s.number.int\n\t.greaterThanOrEqual(0)\n\t.lessThanOrEqual(25)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport function validateRequiredSelectMenuParameters(options: StringSelectMenuOptionBuilder[], customId?: string) {\n\tcustomIdValidator.parse(customId);\n\toptionsValidator.parse(options);\n}\n\nexport const defaultValidator = s.boolean;\n\nexport function validateRequiredSelectMenuOptionParameters(label?: string, value?: string) {\n\tlabelValueDescriptionValidator.parse(label);\n\tlabelValueDescriptionValidator.parse(value);\n}\n\nexport const channelTypesValidator = s.nativeEnum(ChannelType).array.setValidationEnabled(isValidationEnabled);\n\nexport const urlValidator = s.string\n\t.url({\n\t\tallowedProtocols: ['http:', 'https:', 'discord:'],\n\t})\n\t.setValidationEnabled(isValidationEnabled);\n\nexport function validateRequiredButtonParameters(\n\tstyle?: ButtonStyle,\n\tlabel?: string,\n\temoji?: APIMessageComponentEmoji,\n\tcustomId?: string,\n\turl?: string,\n) {\n\tif (url && customId) {\n\t\tthrow new RangeError('URL and custom id are mutually exclusive');\n\t}\n\n\tif (!label && !emoji) {\n\t\tthrow new RangeError('Buttons must have a label and/or an emoji');\n\t}\n\n\tif (style === ButtonStyle.Link) {\n\t\tif (!url) {\n\t\t\tthrow new RangeError('Link buttons must have a url');\n\t\t}\n\t} else if (url) {\n\t\tthrow new RangeError('Non-link buttons cannot have a url');\n\t}\n}\n","import type { JSONEncodable } from '@discordjs/util';\nimport type { APIMessageComponentEmoji, APISelectMenuOption } from 'discord-api-types/v10';\nimport {\n\tdefaultValidator,\n\temojiValidator,\n\tlabelValueDescriptionValidator,\n\tvalidateRequiredSelectMenuOptionParameters,\n} from '../Assertions.js';\n\n/**\n * Represents an option within a string select menu component\n */\nexport class StringSelectMenuOptionBuilder implements JSONEncodable<APISelectMenuOption> {\n\t/**\n\t * Creates a new string select menu option from API data\n\t *\n\t * @param data - The API data to create this string select menu option with\n\t * @example\n\t * Creating a string select menu option from an API data object\n\t * ```ts\n\t * const selectMenuOption = new SelectMenuOptionBuilder({\n\t * \tlabel: 'catchy label',\n\t * \tvalue: '1',\n\t * });\n\t * ```\n\t * @example\n\t * Creating a string select menu option using setters and API data\n\t * ```ts\n\t * const selectMenuOption = new SelectMenuOptionBuilder({\n\t * \tdefault: true,\n\t * \tvalue: '1',\n\t * })\n\t * \t.setLabel('woah')\n\t * ```\n\t */\n\tpublic constructor(public data: Partial<APISelectMenuOption> = {}) {}\n\n\t/**\n\t * Sets the label of this option\n\t *\n\t * @param label - The label to show on this option\n\t */\n\tpublic setLabel(label: string) {\n\t\tthis.data.label = labelValueDescriptionValidator.parse(label);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value of this option\n\t *\n\t * @param value - The value of this option\n\t */\n\tpublic setValue(value: string) {\n\t\tthis.data.value = labelValueDescriptionValidator.parse(value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the description of this option\n\t *\n\t * @param description - The description of this option\n\t */\n\tpublic setDescription(description: string) {\n\t\tthis.data.description = labelValueDescriptionValidator.parse(description);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets whether this option is selected by default\n\t *\n\t * @param isDefault - Whether this option is selected by default\n\t */\n\tpublic setDefault(isDefault = true) {\n\t\tthis.data.default = defaultValidator.parse(isDefault);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the emoji to display on this option\n\t *\n\t * @param emoji - The emoji to display on this option\n\t */\n\tpublic setEmoji(emoji: APIMessageComponentEmoji) {\n\t\tthis.data.emoji = emojiValidator.parse(emoji);\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ComponentBuilder.toJSON}\n\t */\n\tpublic toJSON(): APISelectMenuOption {\n\t\tvalidateRequiredSelectMenuOptionParameters(this.data.label, this.data.value);\n\n\t\treturn {\n\t\t\t...this.data,\n\t\t} as APISelectMenuOption;\n\t}\n}\n","/* eslint-disable jsdoc/check-param-names */\n\nimport {\n\ttype APIActionRowComponent,\n\tComponentType,\n\ttype APIMessageActionRowComponent,\n\ttype APIModalActionRowComponent,\n\ttype APIActionRowComponentTypes,\n} from 'discord-api-types/v10';\nimport { normalizeArray, type RestOrArray } from '../util/normalizeArray.js';\nimport { ComponentBuilder } from './Component.js';\nimport { createComponentBuilder } from './Components.js';\nimport type { ButtonBuilder } from './button/Button.js';\nimport type { ChannelSelectMenuBuilder } from './selectMenu/ChannelSelectMenu.js';\nimport type { MentionableSelectMenuBuilder } from './selectMenu/MentionableSelectMenu.js';\nimport type { RoleSelectMenuBuilder } from './selectMenu/RoleSelectMenu.js';\nimport type { StringSelectMenuBuilder } from './selectMenu/StringSelectMenu.js';\nimport type { UserSelectMenuBuilder } from './selectMenu/UserSelectMenu.js';\nimport type { TextInputBuilder } from './textInput/TextInput.js';\n\nexport type MessageComponentBuilder =\n\t| ActionRowBuilder<MessageActionRowComponentBuilder>\n\t| MessageActionRowComponentBuilder;\nexport type ModalComponentBuilder = ActionRowBuilder<ModalActionRowComponentBuilder> | ModalActionRowComponentBuilder;\nexport type MessageActionRowComponentBuilder =\n\t| ButtonBuilder\n\t| ChannelSelectMenuBuilder\n\t| MentionableSelectMenuBuilder\n\t| RoleSelectMenuBuilder\n\t| StringSelectMenuBuilder\n\t| UserSelectMenuBuilder;\nexport type ModalActionRowComponentBuilder = TextInputBuilder;\nexport type AnyComponentBuilder = MessageActionRowComponentBuilder | ModalActionRowComponentBuilder;\n\n/**\n * Represents an action row component\n *\n * @typeParam T - The types of components this action row holds\n */\nexport class ActionRowBuilder<T extends AnyComponentBuilder> extends ComponentBuilder<\n\tAPIActionRowComponent<APIMessageActionRowComponent | APIModalActionRowComponent>\n> {\n\t/**\n\t * The components within this action row\n\t */\n\tpublic readonly components: T[];\n\n\t/**\n\t * Creates a new action row from API data\n\t *\n\t * @param data - The API data to create this action row with\n\t * @example\n\t * Creating an action row from an API data object\n\t * ```ts\n\t * const actionRow = new ActionRowBuilder({\n\t * \tcomponents: [\n\t * \t\t{\n\t * \t\t\tcustom_id: \"custom id\",\n\t * \t\t\tlabel: \"Type something\",\n\t * \t\t\tstyle: TextInputStyle.Short,\n\t * \t\t\ttype: ComponentType.TextInput,\n\t * \t\t},\n\t * \t],\n\t * });\n\t * ```\n\t * @example\n\t * Creating an action row using setters and API data\n\t * ```ts\n\t * const actionRow = new ActionRowBuilder({\n\t * \tcomponents: [\n\t * \t\t{\n\t * \t\t\tcustom_id: \"custom id\",\n\t * \t\t\tlabel: \"Click me\",\n\t * \t\t\tstyle: ButtonStyle.Primary,\n\t * \t\t\ttype: ComponentType.Button,\n\t * \t\t},\n\t * \t],\n\t * })\n\t * \t.addComponents(button2, button3);\n\t * ```\n\t */\n\tpublic constructor({ components, ...data }: Partial<APIActionRowComponent<APIActionRowComponentTypes>> = {}) {\n\t\tsuper({ type: ComponentType.ActionRow, ...data });\n\t\tthis.components = (components?.map((component) => createComponentBuilder(component)) ?? []) as T[];\n\t}\n\n\t/**\n\t * Adds components to this action row.\n\t *\n\t * @param components - The components to add to this action row.\n\t */\n\tpublic addComponents(...components: RestOrArray<T>) {\n\t\tthis.components.push(...normalizeArray(components));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the components in this action row\n\t *\n\t * @param components - The components to set this row to\n\t */\n\tpublic setComponents(...components: RestOrArray<T>) {\n\t\tthis.components.splice(0, this.components.length, ...normalizeArray(components));\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ComponentBuilder.toJSON}\n\t */\n\tpublic toJSON(): APIActionRowComponent<ReturnType<T['toJSON']>> {\n\t\treturn {\n\t\t\t...this.data,\n\t\t\tcomponents: this.components.map((component) => component.toJSON()),\n\t\t} as APIActionRowComponent<ReturnType<T['toJSON']>>;\n\t}\n}\n","import type { JSONEncodable } from '@discordjs/util';\nimport type {\n\tAPIActionRowComponent,\n\tAPIActionRowComponentTypes,\n\tAPIBaseComponent,\n\tComponentType,\n} from 'discord-api-types/v10';\n\nexport type AnyAPIActionRowComponent = APIActionRowComponent<APIActionRowComponentTypes> | APIActionRowComponentTypes;\n\n/**\n * Represents a discord component\n *\n * @typeParam DataType - The type of internal API data that is stored within the component\n */\nexport abstract class ComponentBuilder<\n\tDataType extends Partial<APIBaseComponent<ComponentType>> = APIBaseComponent<ComponentType>,\n> implements JSONEncodable<AnyAPIActionRowComponent>\n{\n\t/**\n\t * The API data associated with this component\n\t */\n\tpublic readonly data: Partial<DataType>;\n\n\t/**\n\t * Serializes this component to an API-compatible JSON object\n\t *\n\t * @remarks\n\t * This method runs validations on the data before serializing it.\n\t * As such, it may throw an error if the data is invalid.\n\t */\n\tpublic abstract toJSON(): AnyAPIActionRowComponent;\n\n\tpublic constructor(data: Partial<DataType>) {\n\t\tthis.data = data;\n\t}\n}\n","import { ComponentType, type APIMessageComponent, type APIModalComponent } from 'discord-api-types/v10';\nimport {\n\tActionRowBuilder,\n\ttype AnyComponentBuilder,\n\ttype MessageComponentBuilder,\n\ttype ModalComponentBuilder,\n} from './ActionRow.js';\nimport { ComponentBuilder } from './Component.js';\nimport { ButtonBuilder } from './button/Button.js';\nimport { ChannelSelectMenuBuilder } from './selectMenu/ChannelSelectMenu.js';\nimport { MentionableSelectMenuBuilder } from './selectMenu/MentionableSelectMenu.js';\nimport { RoleSelectMenuBuilder } from './selectMenu/RoleSelectMenu.js';\nimport { StringSelectMenuBuilder } from './selectMenu/StringSelectMenu.js';\nimport { UserSelectMenuBuilder } from './selectMenu/UserSelectMenu.js';\nimport { TextInputBuilder } from './textInput/TextInput.js';\n\nexport interface MappedComponentTypes {\n\t[ComponentType.ActionRow]: ActionRowBuilder<AnyComponentBuilder>;\n\t[ComponentType.Button]: ButtonBuilder;\n\t[ComponentType.StringSelect]: StringSelectMenuBuilder;\n\t[ComponentType.TextInput]: TextInputBuilder;\n\t[ComponentType.UserSelect]: UserSelectMenuBuilder;\n\t[ComponentType.RoleSelect]: RoleSelectMenuBuilder;\n\t[ComponentType.MentionableSelect]: MentionableSelectMenuBuilder;\n\t[ComponentType.ChannelSelect]: ChannelSelectMenuBuilder;\n}\n\n/**\n * Factory for creating components from API data\n *\n * @param data - The api data to transform to a component class\n */\nexport function createComponentBuilder<T extends keyof MappedComponentTypes>(\n\t// eslint-disable-next-line @typescript-eslint/sort-type-union-intersection-members\n\tdata: (APIModalComponent | APIMessageComponent) & { type: T },\n): MappedComponentTypes[T];\nexport function createComponentBuilder<C extends MessageComponentBuilder | ModalComponentBuilder>(data: C): C;\nexport function createComponentBuilder(\n\tdata: APIMessageComponent | APIModalComponent | MessageComponentBuilder,\n): ComponentBuilder {\n\tif (data instanceof ComponentBuilder) {\n\t\treturn data;\n\t}\n\n\tswitch (data.type) {\n\t\tcase ComponentType.ActionRow:\n\t\t\treturn new ActionRowBuilder(data);\n\t\tcase ComponentType.Button:\n\t\t\treturn new ButtonBuilder(data);\n\t\tcase ComponentType.StringSelect:\n\t\t\treturn new StringSelectMenuBuilder(data);\n\t\tcase ComponentType.TextInput:\n\t\t\treturn new TextInputBuilder(data);\n\t\tcase ComponentType.UserSelect:\n\t\t\treturn new UserSelectMenuBuilder(data);\n\t\tcase ComponentType.RoleSelect:\n\t\t\treturn new RoleSelectMenuBuilder(data);\n\t\tcase ComponentType.MentionableSelect:\n\t\t\treturn new MentionableSelectMenuBuilder(data);\n\t\tcase ComponentType.ChannelSelect:\n\t\t\treturn new ChannelSelectMenuBuilder(data);\n\t\tdefault:\n\t\t\t// @ts-expect-error: This case can still occur if we get a newer unsupported component type\n\t\t\tthrow new Error(`Cannot properly serialize component type: ${data.type}`);\n\t}\n}\n","import {\n\tComponentType,\n\ttype APIMessageComponentEmoji,\n\ttype APIButtonComponent,\n\ttype APIButtonComponentWithURL,\n\ttype APIButtonComponentWithCustomId,\n\ttype ButtonStyle,\n} from 'discord-api-types/v10';\nimport {\n\tbuttonLabelValidator,\n\tbuttonStyleValidator,\n\tcustomIdValidator,\n\tdisabledValidator,\n\temojiValidator,\n\turlValidator,\n\tvalidateRequiredButtonParameters,\n} from '../Assertions.js';\nimport { ComponentBuilder } from '../Component.js';\n\n/**\n * Represents a button component\n */\nexport class ButtonBuilder extends ComponentBuilder<APIButtonComponent> {\n\t/**\n\t * Creates a new button from API data\n\t *\n\t * @param data - The API data to create this button with\n\t * @example\n\t * Creating a button from an API data object\n\t * ```ts\n\t * const button = new ButtonBuilder({\n\t * \tcustom_id: 'a cool button',\n\t * \tstyle: ButtonStyle.Primary,\n\t * \tlabel: 'Click Me',\n\t * \temoji: {\n\t * \t\tname: 'smile',\n\t * \t\tid: '123456789012345678',\n\t * \t},\n\t * });\n\t * ```\n\t * @example\n\t * Creating a button using setters and API data\n\t * ```ts\n\t * const button = new ButtonBuilder({\n\t * \tstyle: ButtonStyle.Secondary,\n\t * \tlabel: 'Click Me',\n\t * })\n\t * \t.setEmoji({ name: '🙂' })\n\t * \t.setCustomId('another cool button');\n\t * ```\n\t */\n\tpublic constructor(data?: Partial<APIButtonComponent>) {\n\t\tsuper({ type: ComponentType.Button, ...data });\n\t}\n\n\t/**\n\t * Sets the style of this button\n\t *\n\t * @param style - The style of the button\n\t */\n\tpublic setStyle(style: ButtonStyle) {\n\t\tthis.data.style = buttonStyleValidator.parse(style);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the URL for this button\n\t *\n\t * @remarks\n\t * This method is only available to buttons using the `Link` button style.\n\t * Only three types of URL schemes are currently supported: `https://`, `http://` and `discord://`\n\t * @param url - The URL to open when this button is clicked\n\t */\n\tpublic setURL(url: string) {\n\t\t(this.data as APIButtonComponentWithURL).url = urlValidator.parse(url);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the custom id for this button\n\t *\n\t * @remarks\n\t * This method is only applicable to buttons that are not using the `Link` button style.\n\t * @param customId - The custom id to use for this button\n\t */\n\tpublic setCustomId(customId: string) {\n\t\t(this.data as APIButtonComponentWithCustomId).custom_id = customIdValidator.parse(customId);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the emoji to display on this button\n\t *\n\t * @param emoji - The emoji to display on this button\n\t */\n\tpublic setEmoji(emoji: APIMessageComponentEmoji) {\n\t\tthis.data.emoji = emojiValidator.parse(emoji);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets whether this button is disabled\n\t *\n\t * @param disabled - Whether to disable this button\n\t */\n\tpublic setDisabled(disabled = true) {\n\t\tthis.data.disabled = disabledValidator.parse(disabled);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the label for this button\n\t *\n\t * @param label - The label to display on this button\n\t */\n\tpublic setLabel(label: string) {\n\t\tthis.data.label = buttonLabelValidator.parse(label);\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ComponentBuilder.toJSON}\n\t */\n\tpublic toJSON(): APIButtonComponent {\n\t\tvalidateRequiredButtonParameters(\n\t\t\tthis.data.style,\n\t\t\tthis.data.label,\n\t\t\tthis.data.emoji,\n\t\t\t(this.data as APIButtonComponentWithCustomId).custom_id,\n\t\t\t(this.data as APIButtonComponentWithURL).url,\n\t\t);\n\n\t\treturn {\n\t\t\t...this.data,\n\t\t} as APIButtonComponent;\n\t}\n}\n","import type { APIChannelSelectComponent, ChannelType } from 'discord-api-types/v10';\nimport { ComponentType } from 'discord-api-types/v10';\nimport { normalizeArray, type RestOrArray } from '../../util/normalizeArray.js';\nimport { channelTypesValidator, customIdValidator } from '../Assertions.js';\nimport { BaseSelectMenuBuilder } from './BaseSelectMenu.js';\n\nexport class ChannelSelectMenuBuilder extends BaseSelectMenuBuilder<APIChannelSelectComponent> {\n\t/**\n\t * Creates a new select menu from API data\n\t *\n\t * @param data - The API data to create this select menu with\n\t * @example\n\t * Creating a select menu from an API data object\n\t * ```ts\n\t * const selectMenu = new ChannelSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * \tplaceholder: 'select an option',\n\t * \tmax_values: 2,\n\t * });\n\t * ```\n\t * @example\n\t * Creating a select menu using setters and API data\n\t * ```ts\n\t * const selectMenu = new ChannelSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * })\n\t * \t.addChannelTypes(ChannelType.GuildText, ChannelType.GuildAnnouncement)\n\t * \t.setMinValues(2)\n\t * ```\n\t */\n\tpublic constructor(data?: Partial<APIChannelSelectComponent>) {\n\t\tsuper({ ...data, type: ComponentType.ChannelSelect });\n\t}\n\n\tpublic addChannelTypes(...types: RestOrArray<ChannelType>) {\n\t\t// eslint-disable-next-line no-param-reassign\n\t\ttypes = normalizeArray(types);\n\n\t\tthis.data.channel_types ??= [];\n\t\tthis.data.channel_types.push(...channelTypesValidator.parse(types));\n\t\treturn this;\n\t}\n\n\tpublic setChannelTypes(...types: RestOrArray<ChannelType>) {\n\t\t// eslint-disable-next-line no-param-reassign\n\t\ttypes = normalizeArray(types);\n\n\t\tthis.data.channel_types ??= [];\n\t\tthis.data.channel_types.splice(0, this.data.channel_types.length, ...channelTypesValidator.parse(types));\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ComponentBuilder.toJSON}\n\t */\n\tpublic override toJSON(): APIChannelSelectComponent {\n\t\tcustomIdValidator.parse(this.data.custom_id);\n\n\t\treturn {\n\t\t\t...this.data,\n\t\t} as APIChannelSelectComponent;\n\t}\n}\n","import type { APISelectMenuComponent } from 'discord-api-types/v10';\nimport { customIdValidator, disabledValidator, minMaxValidator, placeholderValidator } from '../Assertions.js';\nimport { ComponentBuilder } from '../Component.js';\n\nexport class BaseSelectMenuBuilder<\n\tSelectMenuType extends APISelectMenuComponent,\n> extends ComponentBuilder<SelectMenuType> {\n\t/**\n\t * Sets the placeholder for this select menu\n\t *\n\t * @param placeholder - The placeholder to use for this select menu\n\t */\n\tpublic setPlaceholder(placeholder: string) {\n\t\tthis.data.placeholder = placeholderValidator.parse(placeholder);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the minimum values that must be selected in the select menu\n\t *\n\t * @param minValues - The minimum values that must be selected\n\t */\n\tpublic setMinValues(minValues: number) {\n\t\tthis.data.min_values = minMaxValidator.parse(minValues);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the maximum values that must be selected in the select menu\n\t *\n\t * @param maxValues - The maximum values that must be selected\n\t */\n\tpublic setMaxValues(maxValues: number) {\n\t\tthis.data.max_values = minMaxValidator.parse(maxValues);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the custom id for this select menu\n\t *\n\t * @param customId - The custom id to use for this select menu\n\t */\n\tpublic setCustomId(customId: string) {\n\t\tthis.data.custom_id = customIdValidator.parse(customId);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets whether this select menu is disabled\n\t *\n\t * @param disabled - Whether this select menu is disabled\n\t */\n\tpublic setDisabled(disabled = true) {\n\t\tthis.data.disabled = disabledValidator.parse(disabled);\n\t\treturn this;\n\t}\n\n\tpublic toJSON(): SelectMenuType {\n\t\tcustomIdValidator.parse(this.data.custom_id);\n\t\treturn {\n\t\t\t...this.data,\n\t\t} as SelectMenuType;\n\t}\n}\n","import type { APIMentionableSelectComponent } from 'discord-api-types/v10';\nimport { ComponentType } from 'discord-api-types/v10';\nimport { BaseSelectMenuBuilder } from './BaseSelectMenu.js';\n\nexport class MentionableSelectMenuBuilder extends BaseSelectMenuBuilder<APIMentionableSelectComponent> {\n\t/**\n\t * Creates a new select menu from API data\n\t *\n\t * @param data - The API data to create this select menu with\n\t * @example\n\t * Creating a select menu from an API data object\n\t * ```ts\n\t * const selectMenu = new MentionableSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * \tplaceholder: 'select an option',\n\t * \tmax_values: 2,\n\t * });\n\t * ```\n\t * @example\n\t * Creating a select menu using setters and API data\n\t * ```ts\n\t * const selectMenu = new MentionableSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * })\n\t * \t.setMinValues(1)\n\t * ```\n\t */\n\tpublic constructor(data?: Partial<APIMentionableSelectComponent>) {\n\t\tsuper({ ...data, type: ComponentType.MentionableSelect });\n\t}\n}\n","import type { APIRoleSelectComponent } from 'discord-api-types/v10';\nimport { ComponentType } from 'discord-api-types/v10';\nimport { BaseSelectMenuBuilder } from './BaseSelectMenu.js';\n\nexport class RoleSelectMenuBuilder extends BaseSelectMenuBuilder<APIRoleSelectComponent> {\n\t/**\n\t * Creates a new select menu from API data\n\t *\n\t * @param data - The API data to create this select menu with\n\t * @example\n\t * Creating a select menu from an API data object\n\t * ```ts\n\t * const selectMenu = new RoleSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * \tplaceholder: 'select an option',\n\t * \tmax_values: 2,\n\t * });\n\t * ```\n\t * @example\n\t * Creating a select menu using setters and API data\n\t * ```ts\n\t * const selectMenu = new RoleSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * })\n\t * \t.setMinValues(1)\n\t * ```\n\t */\n\tpublic constructor(data?: Partial<APIRoleSelectComponent>) {\n\t\tsuper({ ...data, type: ComponentType.RoleSelect });\n\t}\n}\n","import { ComponentType } from 'discord-api-types/v10';\nimport type { APIStringSelectComponent, APISelectMenuOption } from 'discord-api-types/v10';\nimport { normalizeArray, type RestOrArray } from '../../util/normalizeArray.js';\nimport { jsonOptionValidator, optionsLengthValidator, validateRequiredSelectMenuParameters } from '../Assertions.js';\nimport { BaseSelectMenuBuilder } from './BaseSelectMenu.js';\nimport { StringSelectMenuOptionBuilder } from './StringSelectMenuOption.js';\n\n/**\n * Represents a string select menu component\n */\nexport class StringSelectMenuBuilder extends BaseSelectMenuBuilder<APIStringSelectComponent> {\n\t/**\n\t * The options within this select menu\n\t */\n\tpublic readonly options: StringSelectMenuOptionBuilder[];\n\n\t/**\n\t * Creates a new select menu from API data\n\t *\n\t * @param data - The API data to create this select menu with\n\t * @example\n\t * Creating a select menu from an API data object\n\t * ```ts\n\t * const selectMenu = new StringSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * \tplaceholder: 'select an option',\n\t * \tmax_values: 2,\n\t * \toptions: [\n\t * \t\t{ label: 'option 1', value: '1' },\n\t * \t\t{ label: 'option 2', value: '2' },\n\t * \t\t{ label: 'option 3', value: '3' },\n\t * \t],\n\t * });\n\t * ```\n\t * @example\n\t * Creating a select menu using setters and API data\n\t * ```ts\n\t * const selectMenu = new StringSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * })\n\t * \t.setMinValues(1)\n\t * \t.addOptions({\n\t * \t\tlabel: 'Catchy',\n\t * \t\tvalue: 'catch',\n\t * \t});\n\t * ```\n\t */\n\tpublic constructor(data?: Partial<APIStringSelectComponent>) {\n\t\tconst { options, ...initData } = data ?? {};\n\t\tsuper({ ...initData, type: ComponentType.StringSelect });\n\t\tthis.options = options?.map((option: APISelectMenuOption) => new StringSelectMenuOptionBuilder(option)) ?? [];\n\t}\n\n\t/**\n\t * Adds options to this select menu\n\t *\n\t * @param options - The options to add to this select menu\n\t * @returns\n\t */\n\tpublic addOptions(...options: RestOrArray<APISelectMenuOption | StringSelectMenuOptionBuilder>) {\n\t\t// eslint-disable-next-line no-param-reassign\n\t\toptions = normalizeArray(options);\n\t\toptionsLengthValidator.parse(this.options.length + options.length);\n\t\tthis.options.push(\n\t\t\t...options.map((option) =>\n\t\t\t\toption instanceof StringSelectMenuOptionBuilder\n\t\t\t\t\t? option\n\t\t\t\t\t: new StringSelectMenuOptionBuilder(jsonOptionValidator.parse(option)),\n\t\t\t),\n\t\t);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the options on this select menu\n\t *\n\t * @param options - The options to set on this select menu\n\t */\n\tpublic setOptions(...options: RestOrArray<APISelectMenuOption | StringSelectMenuOptionBuilder>) {\n\t\treturn this.spliceOptions(0, this.options.length, ...options);\n\t}\n\n\t/**\n\t * Removes, replaces, or inserts options in the string select menu.\n\t *\n\t * @remarks\n\t * This method behaves similarly\n\t * to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice | Array.prototype.splice}.\n\t *\n\t * It's useful for modifying and adjusting order of the already-existing options of a string select menu.\n\t * @example\n\t * Remove the first option\n\t * ```ts\n\t * selectMenu.spliceOptions(0, 1);\n\t * ```\n\t * @example\n\t * Remove the first n option\n\t * ```ts\n\t * const n = 4\n\t * selectMenu.spliceOptions(0, n);\n\t * ```\n\t * @example\n\t * Remove the last option\n\t * ```ts\n\t * selectMenu.spliceOptions(-1, 1);\n\t * ```\n\t * @param index - The index to start at\n\t * @param deleteCount - The number of options to remove\n\t * @param options - The replacing option objects or builders\n\t */\n\tpublic spliceOptions(\n\t\tindex: number,\n\t\tdeleteCount: number,\n\t\t...options: RestOrArray<APISelectMenuOption | StringSelectMenuOptionBuilder>\n\t) {\n\t\t// eslint-disable-next-line no-param-reassign\n\t\toptions = normalizeArray(options);\n\n\t\tconst clone = [...this.options];\n\n\t\tclone.splice(\n\t\t\tindex,\n\t\t\tdeleteCount,\n\t\t\t...options.map((option) =>\n\t\t\t\toption instanceof StringSelectMenuOptionBuilder\n\t\t\t\t\t? option\n\t\t\t\t\t: new StringSelectMenuOptionBuilder(jsonOptionValidator.parse(option)),\n\t\t\t),\n\t\t);\n\n\t\toptionsLengthValidator.parse(clone.length);\n\n\t\tthis.options.splice(0, this.options.length, ...clone);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ComponentBuilder.toJSON}\n\t */\n\tpublic override toJSON(): APIStringSelectComponent {\n\t\tvalidateRequiredSelectMenuParameters(this.options, this.data.custom_id);\n\n\t\treturn {\n\t\t\t...this.data,\n\t\t\toptions: this.options.map((option) => option.toJSON()),\n\t\t} as APIStringSelectComponent;\n\t}\n}\n","import type { APIUserSelectComponent } from 'discord-api-types/v10';\nimport { ComponentType } from 'discord-api-types/v10';\nimport { BaseSelectMenuBuilder } from './BaseSelectMenu.js';\n\nexport class UserSelectMenuBuilder extends BaseSelectMenuBuilder<APIUserSelectComponent> {\n\t/**\n\t * Creates a new select menu from API data\n\t *\n\t * @param data - The API data to create this select menu with\n\t * @example\n\t * Creating a select menu from an API data object\n\t * ```ts\n\t * const selectMenu = new UserSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * \tplaceholder: 'select an option',\n\t * \tmax_values: 2,\n\t * });\n\t * ```\n\t * @example\n\t * Creating a select menu using setters and API data\n\t * ```ts\n\t * const selectMenu = new UserSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * })\n\t * \t.setMinValues(1)\n\t * ```\n\t */\n\tpublic constructor(data?: Partial<APIUserSelectComponent>) {\n\t\tsuper({ ...data, type: ComponentType.UserSelect });\n\t}\n}\n","import { isJSONEncodable, type Equatable, type JSONEncodable } from '@discordjs/util';\nimport { ComponentType, type TextInputStyle, type APITextInputComponent } from 'discord-api-types/v10';\nimport isEqual from 'fast-deep-equal';\nimport { customIdValidator } from '../Assertions.js';\nimport { ComponentBuilder } from '../Component.js';\nimport {\n\tmaxLengthValidator,\n\tminLengthValidator,\n\tplaceholderValidator,\n\trequiredValidator,\n\tvalueValidator,\n\tvalidateRequiredParameters,\n\tlabelValidator,\n\ttextInputStyleValidator,\n} from './Assertions.js';\n\nexport class TextInputBuilder\n\textends ComponentBuilder<APITextInputComponent>\n\timplements Equatable<APITextInputComponent | JSONEncodable<APITextInputComponent>>\n{\n\t/**\n\t * Creates a new text input from API data\n\t *\n\t * @param data - The API data to create this text input with\n\t * @example\n\t * Creating a select menu option from an API data object\n\t * ```ts\n\t * const textInput = new TextInputBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * \tlabel: 'Type something',\n\t * \tstyle: TextInputStyle.Short,\n\t * });\n\t * ```\n\t * @example\n\t * Creating a select menu option using setters and API data\n\t * ```ts\n\t * const textInput = new TextInputBuilder({\n\t * \tlabel: 'Type something else',\n\t * })\n\t * \t.setCustomId('woah')\n\t * \t.setStyle(TextInputStyle.Paragraph);\n\t * ```\n\t */\n\tpublic constructor(data?: APITextInputComponent & { type?: ComponentType.TextInput }) {\n\t\tsuper({ type: ComponentType.TextInput, ...data });\n\t}\n\n\t/**\n\t * Sets the custom id for this text input\n\t *\n\t * @param customId - The custom id of this text input\n\t */\n\tpublic setCustomId(customId: string) {\n\t\tthis.data.custom_id = customIdValidator.parse(customId);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the label for this text input\n\t *\n\t * @param label - The label for this text input\n\t */\n\tpublic setLabel(label: string) {\n\t\tthis.data.label = labelValidator.parse(label);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the style for this text input\n\t *\n\t * @param style - The style for this text input\n\t */\n\tpublic setStyle(style: TextInputStyle) {\n\t\tthis.data.style = textInputStyleValidator.parse(style);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the minimum length of text for this text input\n\t *\n\t * @param minLength - The minimum length of text for this text input\n\t */\n\tpublic setMinLength(minLength: number) {\n\t\tthis.data.min_length = minLengthValidator.parse(minLength);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the maximum length of text for this text input\n\t *\n\t * @param maxLength - The maximum length of text for this text input\n\t */\n\tpublic setMaxLength(maxLength: number) {\n\t\tthis.data.max_length = maxLengthValidator.parse(maxLength);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the placeholder of this text input\n\t *\n\t * @param placeholder - The placeholder of this text input\n\t */\n\tpublic setPlaceholder(placeholder: string) {\n\t\tthis.data.placeholder = placeholderValidator.parse(placeholder);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value of this text input\n\t *\n\t * @param value - The value for this text input\n\t */\n\tpublic setValue(value: string) {\n\t\tthis.data.value = valueValidator.parse(value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets whether this text input is required\n\t *\n\t * @param required - Whether this text input is required\n\t */\n\tpublic setRequired(required = true) {\n\t\tthis.data.required = requiredValidator.parse(required);\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ComponentBuilder.toJSON}\n\t */\n\tpublic toJSON(): APITextInputComponent {\n\t\tvalidateRequiredParameters(this.data.custom_id, this.data.style, this.data.label);\n\n\t\treturn {\n\t\t\t...this.data,\n\t\t} as APITextInputComponent;\n\t}\n\n\t/**\n\t * {@inheritDoc Equatable.equals}\n\t */\n\tpublic equals(other: APITextInputComponent | JSONEncodable<APITextInputComponent>): boolean {\n\t\tif (isJSONEncodable(other)) {\n\t\t\treturn isEqual(other.toJSON(), this.data);\n\t\t}\n\n\t\treturn isEqual(other, this.data);\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { TextInputStyle } from 'discord-api-types/v10';\nimport { isValidationEnabled } from '../../util/validation.js';\nimport { customIdValidator } from '../Assertions.js';\n\nexport const textInputStyleValidator = s.nativeEnum(TextInputStyle);\nexport const minLengthValidator = s.number.int\n\t.greaterThanOrEqual(0)\n\t.lessThanOrEqual(4_000)\n\t.setValidationEnabled(isValidationEnabled);\nexport const maxLengthValidator = s.number.int\n\t.greaterThanOrEqual(1)\n\t.lessThanOrEqual(4_000)\n\t.setValidationEnabled(isValidationEnabled);\nexport const requiredValidator = s.boolean;\nexport const valueValidator = s.string.lengthLessThanOrEqual(4_000).setValidationEnabled(isValidationEnabled);\nexport const placeholderValidator = s.string.lengthLessThanOrEqual(100).setValidationEnabled(isValidationEnabled);\nexport const labelValidator = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(45)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport function validateRequiredParameters(customId?: string, style?: TextInputStyle, label?: string) {\n\tcustomIdValidator.parse(customId);\n\ttextInputStyleValidator.parse(style);\n\tlabelValidator.parse(label);\n}\n","import { s } from '@sapphire/shapeshift';\nimport { ActionRowBuilder, type ModalActionRowComponentBuilder } from '../../components/ActionRow.js';\nimport { customIdValidator } from '../../components/Assertions.js';\nimport { isValidationEnabled } from '../../util/validation.js';\n\nexport const titleValidator = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(45)\n\t.setValidationEnabled(isValidationEnabled);\nexport const componentsValidator = s\n\t.instance(ActionRowBuilder)\n\t.array.lengthGreaterThanOrEqual(1)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport function validateRequiredParameters(\n\tcustomId?: string,\n\ttitle?: string,\n\tcomponents?: ActionRowBuilder<ModalActionRowComponentBuilder>[],\n) {\n\tcustomIdValidator.parse(customId);\n\ttitleValidator.parse(title);\n\tcomponentsValidator.parse(components);\n}\n","import type { JSONEncodable } from '@discordjs/util';\nimport type {\n\tAPIActionRowComponent,\n\tAPIModalActionRowComponent,\n\tAPIModalInteractionResponseCallbackData,\n} from 'discord-api-types/v10';\nimport { ActionRowBuilder, type ModalActionRowComponentBuilder } from '../../components/ActionRow.js';\nimport { customIdValidator } from '../../components/Assertions.js';\nimport { createComponentBuilder } from '../../components/Components.js';\nimport { normalizeArray, type RestOrArray } from '../../util/normalizeArray.js';\nimport { titleValidator, validateRequiredParameters } from './Assertions.js';\n\nexport class ModalBuilder implements JSONEncodable<APIModalInteractionResponseCallbackData> {\n\tpublic readonly data: Partial<APIModalInteractionResponseCallbackData>;\n\n\tpublic readonly components: ActionRowBuilder<ModalActionRowComponentBuilder>[] = [];\n\n\tpublic constructor({ components, ...data }: Partial<APIModalInteractionResponseCallbackData> = {}) {\n\t\tthis.data = { ...data };\n\t\tthis.components = (components?.map((component) => createComponentBuilder(component)) ??\n\t\t\t[]) as ActionRowBuilder<ModalActionRowComponentBuilder>[];\n\t}\n\n\t/**\n\t * Sets the title of the modal\n\t *\n\t * @param title - The title of the modal\n\t */\n\tpublic setTitle(title: string) {\n\t\tthis.data.title = titleValidator.parse(title);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the custom id of the modal\n\t *\n\t * @param customId - The custom id of this modal\n\t */\n\tpublic setCustomId(customId: string) {\n\t\tthis.data.custom_id = customIdValidator.parse(customId);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds components to this modal\n\t *\n\t * @param components - The components to add to this modal\n\t */\n\tpublic addComponents(\n\t\t...components: RestOrArray<\n\t\t\tActionRowBuilder<ModalActionRowComponentBuilder> | APIActionRowComponent<APIModalActionRowComponent>\n\t\t>\n\t) {\n\t\tthis.components.push(\n\t\t\t...normalizeArray(components).map((component) =>\n\t\t\t\tcomponent instanceof ActionRowBuilder\n\t\t\t\t\t? component\n\t\t\t\t\t: new ActionRowBuilder<ModalActionRowComponentBuilder>(component),\n\t\t\t),\n\t\t);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the components in this modal\n\t *\n\t * @param components - The components to set this modal to\n\t */\n\tpublic setComponents(...components: RestOrArray<ActionRowBuilder<ModalActionRowComponentBuilder>>) {\n\t\tthis.components.splice(0, this.components.length, ...normalizeArray(components));\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ComponentBuilder.toJSON}\n\t */\n\tpublic toJSON(): APIModalInteractionResponseCallbackData {\n\t\tvalidateRequiredParameters(this.data.custom_id, this.data.title, this.components);\n\n\t\treturn {\n\t\t\t...this.data,\n\t\t\tcomponents: this.components.map((component) => component.toJSON()),\n\t\t} as APIModalInteractionResponseCallbackData;\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { Locale, type APIApplicationCommandOptionChoice, type LocalizationMap } from 'discord-api-types/v10';\nimport { isValidationEnabled } from '../../util/validation.js';\nimport type { ToAPIApplicationCommandOptions } from './SlashCommandBuilder.js';\nimport type { SlashCommandSubcommandBuilder, SlashCommandSubcommandGroupBuilder } from './SlashCommandSubcommands.js';\nimport type { ApplicationCommandOptionBase } from './mixins/ApplicationCommandOptionBase.js';\n\nconst namePredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(32)\n\t.regex(/^[\\p{Ll}\\p{Lm}\\p{Lo}\\p{N}\\p{sc=Devanagari}\\p{sc=Thai}_-]+$/u)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport function validateName(name: unknown): asserts name is string {\n\tnamePredicate.parse(name);\n}\n\nconst descriptionPredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(100)\n\t.setValidationEnabled(isValidationEnabled);\nconst localePredicate = s.nativeEnum(Locale);\n\nexport function validateDescription(description: unknown): asserts description is string {\n\tdescriptionPredicate.parse(description);\n}\n\nconst maxArrayLengthPredicate = s.unknown.array.lengthLessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\nexport function validateLocale(locale: unknown) {\n\treturn localePredicate.parse(locale);\n}\n\nexport function validateMaxOptionsLength(options: unknown): asserts options is ToAPIApplicationCommandOptions[] {\n\tmaxArrayLengthPredicate.parse(options);\n}\n\nexport function validateRequiredParameters(\n\tname: string,\n\tdescription: string,\n\toptions: ToAPIApplicationCommandOptions[],\n) {\n\t// Assert name matches all conditions\n\tvalidateName(name);\n\n\t// Assert description conditions\n\tvalidateDescription(description);\n\n\t// Assert options conditions\n\tvalidateMaxOptionsLength(options);\n}\n\nconst booleanPredicate = s.boolean;\n\nexport function validateDefaultPermission(value: unknown): asserts value is boolean {\n\tbooleanPredicate.parse(value);\n}\n\nexport function validateRequired(required: unknown): asserts required is boolean {\n\tbooleanPredicate.parse(required);\n}\n\nconst choicesLengthPredicate = s.number.lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\n\nexport function validateChoicesLength(amountAdding: number, choices?: APIApplicationCommandOptionChoice[]): void {\n\tchoicesLengthPredicate.parse((choices?.length ?? 0) + amountAdding);\n}\n\nexport function assertReturnOfBuilder<\n\tT extends ApplicationCommandOptionBase | SlashCommandSubcommandBuilder | SlashCommandSubcommandGroupBuilder,\n>(input: unknown, ExpectedInstanceOf: new () => T): asserts input is T {\n\ts.instance(ExpectedInstanceOf).parse(input);\n}\n\nexport const localizationMapPredicate = s\n\t.object<LocalizationMap>(Object.fromEntries(Object.values(Locale).map((locale) => [locale, s.string.nullish])))\n\t.strict.nullish.setValidationEnabled(isValidationEnabled);\n\nexport function validateLocalizationMap(value: unknown): asserts value is LocalizationMap {\n\tlocalizationMapPredicate.parse(value);\n}\n\nconst dmPermissionPredicate = s.boolean.nullish;\n\nexport function validateDMPermission(value: unknown): asserts value is boolean | null | undefined {\n\tdmPermissionPredicate.parse(value);\n}\n\nconst memberPermissionPredicate = s.union(\n\ts.bigint.transform((value) => value.toString()),\n\ts.number.safeInt.transform((value) => value.toString()),\n\ts.string.regex(/^\\d+$/),\n).nullish;\n\nexport function validateDefaultMemberPermissions(permissions: unknown) {\n\treturn memberPermissionPredicate.parse(permissions);\n}\n\nexport function validateNSFW(value: unknown): asserts value is boolean {\n\tbooleanPredicate.parse(value);\n}\n","import type {\n\tAPIApplicationCommandOption,\n\tLocalizationMap,\n\tPermissions,\n\tRESTPostAPIChatInputApplicationCommandsJSONBody,\n} from 'discord-api-types/v10';\nimport { mix } from 'ts-mixer';\nimport {\n\tassertReturnOfBuilder,\n\tvalidateDefaultMemberPermissions,\n\tvalidateDefaultPermission,\n\tvalidateLocalizationMap,\n\tvalidateDMPermission,\n\tvalidateMaxOptionsLength,\n\tvalidateRequiredParameters,\n\tvalidateNSFW,\n} from './Assertions.js';\nimport { SlashCommandSubcommandBuilder, SlashCommandSubcommandGroupBuilder } from './SlashCommandSubcommands.js';\nimport { SharedNameAndDescription } from './mixins/NameAndDescription.js';\nimport { SharedSlashCommandOptions } from './mixins/SharedSlashCommandOptions.js';\n\n@mix(SharedSlashCommandOptions, SharedNameAndDescription)\nexport class SlashCommandBuilder {\n\t/**\n\t * The name of this slash command\n\t */\n\tpublic readonly name: string = undefined!;\n\n\t/**\n\t * The localized names for this command\n\t */\n\tpublic readonly name_localizations?: LocalizationMap;\n\n\t/**\n\t * The description of this slash command\n\t */\n\tpublic readonly description: string = undefined!;\n\n\t/**\n\t * The localized descriptions for this command\n\t */\n\tpublic readonly description_localizations?: LocalizationMap;\n\n\t/**\n\t * The options of this slash command\n\t */\n\tpublic readonly options: ToAPIApplicationCommandOptions[] = [];\n\n\t/**\n\t * Whether the command is enabled by default when the app is added to a guild\n\t *\n\t * @deprecated This property is deprecated and will be removed in the future.\n\t * You should use {@link (SlashCommandBuilder:class).setDefaultMemberPermissions} or {@link (SlashCommandBuilder:class).setDMPermission} instead.\n\t */\n\tpublic readonly default_permission: boolean | undefined = undefined;\n\n\t/**\n\t * Set of permissions represented as a bit set for the command\n\t */\n\tpublic readonly default_member_permissions: Permissions | null | undefined = undefined;\n\n\t/**\n\t * Indicates whether the command is available in DMs with the application, only for globally-scoped commands.\n\t * By default, commands are visible.\n\t */\n\tpublic readonly dm_permission: boolean | undefined = undefined;\n\n\t/**\n\t * Whether this command is NSFW\n\t */\n\tpublic readonly nsfw: boolean | undefined = undefined;\n\n\t/**\n\t * Returns the final data that should be sent to Discord.\n\t *\n\t * @remarks\n\t * This method runs validations on the data before serializing it.\n\t * As such, it may throw an error if the data is invalid.\n\t */\n\tpublic toJSON(): RESTPostAPIChatInputApplicationCommandsJSONBody {\n\t\tvalidateRequiredParameters(this.name, this.description, this.options);\n\n\t\tvalidateLocalizationMap(this.name_localizations);\n\t\tvalidateLocalizationMap(this.description_localizations);\n\n\t\treturn {\n\t\t\t...this,\n\t\t\toptions: this.options.map((option) => option.toJSON()),\n\t\t};\n\t}\n\n\t/**\n\t * Sets whether the command is enabled by default when the application is added to a guild.\n\t *\n\t * @remarks\n\t * If set to `false`, you will have to later `PUT` the permissions for this command.\n\t * @param value - Whether or not to enable this command by default\n\t * @see https://discord.com/developers/docs/interactions/application-commands#permissions\n\t * @deprecated Use {@link (SlashCommandBuilder:class).setDefaultMemberPermissions} or {@link (SlashCommandBuilder:class).setDMPermission} instead.\n\t */\n\tpublic setDefaultPermission(value: boolean) {\n\t\t// Assert the value matches the conditions\n\t\tvalidateDefaultPermission(value);\n\n\t\tReflect.set(this, 'default_permission', value);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the default permissions a member should have in order to run the command.\n\t *\n\t * @remarks\n\t * You can set this to `'0'` to disable the command by default.\n\t * @param permissions - The permissions bit field to set\n\t * @see https://discord.com/developers/docs/interactions/application-commands#permissions\n\t */\n\tpublic setDefaultMemberPermissions(permissions: Permissions | bigint | number | null | undefined) {\n\t\t// Assert the value and parse it\n\t\tconst permissionValue = validateDefaultMemberPermissions(permissions);\n\n\t\tReflect.set(this, 'default_member_permissions', permissionValue);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets if the command is available in DMs with the application, only for globally-scoped commands.\n\t * By default, commands are visible.\n\t *\n\t * @param enabled - If the command should be enabled in DMs\n\t * @see https://discord.com/developers/docs/interactions/application-commands#permissions\n\t */\n\tpublic setDMPermission(enabled: boolean | null | undefined) {\n\t\t// Assert the value matches the conditions\n\t\tvalidateDMPermission(enabled);\n\n\t\tReflect.set(this, 'dm_permission', enabled);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets whether this command is NSFW\n\t *\n\t * @param nsfw - Whether this command is NSFW\n\t */\n\tpublic setNSFW(nsfw = true) {\n\t\t// Assert the value matches the conditions\n\t\tvalidateNSFW(nsfw);\n\t\tReflect.set(this, 'nsfw', nsfw);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a new subcommand group to this command\n\t *\n\t * @param input - A function that returns a subcommand group builder, or an already built builder\n\t */\n\tpublic addSubcommandGroup(\n\t\tinput:\n\t\t\t| SlashCommandSubcommandGroupBuilder\n\t\t\t| ((subcommandGroup: SlashCommandSubcommandGroupBuilder) => SlashCommandSubcommandGroupBuilder),\n\t): SlashCommandSubcommandsOnlyBuilder {\n\t\tconst { options } = this;\n\n\t\t// First, assert options conditions - we cannot have more than 25 options\n\t\tvalidateMaxOptionsLength(options);\n\n\t\t// Get the final result\n\t\tconst result = typeof input === 'function' ? input(new SlashCommandSubcommandGroupBuilder()) : input;\n\n\t\tassertReturnOfBuilder(result, SlashCommandSubcommandGroupBuilder);\n\n\t\t// Push it\n\t\toptions.push(result);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a new subcommand to this command\n\t *\n\t * @param input - A function that returns a subcommand builder, or an already built builder\n\t */\n\tpublic addSubcommand(\n\t\tinput:\n\t\t\t| SlashCommandSubcommandBuilder\n\t\t\t| ((subcommandGroup: SlashCommandSubcommandBuilder) => SlashCommandSubcommandBuilder),\n\t): SlashCommandSubcommandsOnlyBuilder {\n\t\tconst { options } = this;\n\n\t\t// First, assert options conditions - we cannot have more than 25 options\n\t\tvalidateMaxOptionsLength(options);\n\n\t\t// Get the final result\n\t\tconst result = typeof input === 'function' ? input(new SlashCommandSubcommandBuilder()) : input;\n\n\t\tassertReturnOfBuilder(result, SlashCommandSubcommandBuilder);\n\n\t\t// Push it\n\t\toptions.push(result);\n\n\t\treturn this;\n\t}\n}\n\nexport interface SlashCommandBuilder extends SharedNameAndDescription, SharedSlashCommandOptions {}\n\nexport interface SlashCommandSubcommandsOnlyBuilder\n\textends Omit<SlashCommandBuilder, Exclude<keyof SharedSlashCommandOptions, 'options'>> {}\n\nexport interface SlashCommandOptionsOnlyBuilder\n\textends SharedNameAndDescription,\n\t\tSharedSlashCommandOptions,\n\t\tPick<SlashCommandBuilder, 'toJSON'> {}\n\nexport interface ToAPIApplicationCommandOptions {\n\ttoJSON(): APIApplicationCommandOption;\n}\n","import {\n\tApplicationCommandOptionType,\n\ttype APIApplicationCommandSubcommandGroupOption,\n\ttype APIApplicationCommandSubcommandOption,\n} from 'discord-api-types/v10';\nimport { mix } from 'ts-mixer';\nimport { assertReturnOfBuilder, validateMaxOptionsLength, validateRequiredParameters } from './Assertions.js';\nimport type { ToAPIApplicationCommandOptions } from './SlashCommandBuilder.js';\nimport type { ApplicationCommandOptionBase } from './mixins/ApplicationCommandOptionBase.js';\nimport { SharedNameAndDescription } from './mixins/NameAndDescription.js';\nimport { SharedSlashCommandOptions } from './mixins/SharedSlashCommandOptions.js';\n\n/**\n * Represents a folder for subcommands\n *\n * For more information, go to https://discord.com/developers/docs/interactions/application-commands#subcommands-and-subcommand-groups\n */\n@mix(SharedNameAndDescription)\nexport class SlashCommandSubcommandGroupBuilder implements ToAPIApplicationCommandOptions {\n\t/**\n\t * The name of this subcommand group\n\t */\n\tpublic readonly name: string = undefined!;\n\n\t/**\n\t * The description of this subcommand group\n\t */\n\tpublic readonly description: string = undefined!;\n\n\t/**\n\t * The subcommands part of this subcommand group\n\t */\n\tpublic readonly options: SlashCommandSubcommandBuilder[] = [];\n\n\t/**\n\t * Adds a new subcommand to this group\n\t *\n\t * @param input - A function that returns a subcommand builder, or an already built builder\n\t */\n\tpublic addSubcommand(\n\t\tinput:\n\t\t\t| SlashCommandSubcommandBuilder\n\t\t\t| ((subcommandGroup: SlashCommandSubcommandBuilder) => SlashCommandSubcommandBuilder),\n\t) {\n\t\tconst { options } = this;\n\n\t\t// First, assert options conditions - we cannot have more than 25 options\n\t\tvalidateMaxOptionsLength(options);\n\n\t\t// Get the final result\n\t\t// eslint-disable-next-line @typescript-eslint/no-use-before-define\n\t\tconst result = typeof input === 'function' ? input(new SlashCommandSubcommandBuilder()) : input;\n\n\t\t// eslint-disable-next-line @typescript-eslint/no-use-before-define\n\t\tassertReturnOfBuilder(result, SlashCommandSubcommandBuilder);\n\n\t\t// Push it\n\t\toptions.push(result);\n\n\t\treturn this;\n\t}\n\n\tpublic toJSON(): APIApplicationCommandSubcommandGroupOption {\n\t\tvalidateRequiredParameters(this.name, this.description, this.options);\n\n\t\treturn {\n\t\t\ttype: ApplicationCommandOptionType.SubcommandGroup,\n\t\t\tname: this.name,\n\t\t\tname_localizations: this.name_localizations,\n\t\t\tdescription: this.description,\n\t\t\tdescription_localizations: this.description_localizations,\n\t\t\toptions: this.options.map((option) => option.toJSON()),\n\t\t};\n\t}\n}\n\nexport interface SlashCommandSubcommandGroupBuilder extends SharedNameAndDescription {}\n\n/**\n * Represents a subcommand\n *\n * For more information, go to https://discord.com/developers/docs/interactions/application-commands#subcommands-and-subcommand-groups\n */\n@mix(SharedNameAndDescription, SharedSlashCommandOptions)\nexport class SlashCommandSubcommandBuilder implements ToAPIApplicationCommandOptions {\n\t/**\n\t * The name of this subcommand\n\t */\n\tpublic readonly name: string = undefined!;\n\n\t/**\n\t * The description of this subcommand\n\t */\n\tpublic readonly description: string = undefined!;\n\n\t/**\n\t * The options of this subcommand\n\t */\n\tpublic readonly options: ApplicationCommandOptionBase[] = [];\n\n\tpublic toJSON(): APIApplicationCommandSubcommandOption {\n\t\tvalidateRequiredParameters(this.name, this.description, this.options);\n\n\t\treturn {\n\t\t\ttype: ApplicationCommandOptionType.Subcommand,\n\t\t\tname: this.name,\n\t\t\tname_localizations: this.name_localizations,\n\t\t\tdescription: this.description,\n\t\t\tdescription_localizations: this.description_localizations,\n\t\t\toptions: this.options.map((option) => option.toJSON()),\n\t\t};\n\t}\n}\n\nexport interface SlashCommandSubcommandBuilder extends SharedNameAndDescription, SharedSlashCommandOptions<false> {}\n","import type { LocaleString, LocalizationMap } from 'discord-api-types/v10';\nimport { validateDescription, validateLocale, validateName } from '../Assertions.js';\n\nexport class SharedNameAndDescription {\n\tpublic readonly name!: string;\n\n\tpublic readonly name_localizations?: LocalizationMap;\n\n\tpublic readonly description!: string;\n\n\tpublic readonly description_localizations?: LocalizationMap;\n\n\t/**\n\t * Sets the name\n\t *\n\t * @param name - The name\n\t */\n\tpublic setName(name: string): this {\n\t\t// Assert the name matches the conditions\n\t\tvalidateName(name);\n\n\t\tReflect.set(this, 'name', name);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the description\n\t *\n\t * @param description - The description\n\t */\n\tpublic setDescription(description: string) {\n\t\t// Assert the description matches the conditions\n\t\tvalidateDescription(description);\n\n\t\tReflect.set(this, 'description', description);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a name localization\n\t *\n\t * @param locale - The locale to set a description for\n\t * @param localizedName - The localized description for the given locale\n\t */\n\tpublic setNameLocalization(locale: LocaleString, localizedName: string | null) {\n\t\tif (!this.name_localizations) {\n\t\t\tReflect.set(this, 'name_localizations', {});\n\t\t}\n\n\t\tconst parsedLocale = validateLocale(locale);\n\n\t\tif (localizedName === null) {\n\t\t\tthis.name_localizations![parsedLocale] = null;\n\t\t\treturn this;\n\t\t}\n\n\t\tvalidateName(localizedName);\n\n\t\tthis.name_localizations![parsedLocale] = localizedName;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the name localizations\n\t *\n\t * @param localizedNames - The dictionary of localized descriptions to set\n\t */\n\tpublic setNameLocalizations(localizedNames: LocalizationMap | null) {\n\t\tif (localizedNames === null) {\n\t\t\tReflect.set(this, 'name_localizations', null);\n\t\t\treturn this;\n\t\t}\n\n\t\tReflect.set(this, 'name_localizations', {});\n\n\t\tfor (const args of Object.entries(localizedNames)) {\n\t\t\tthis.setNameLocalization(...(args as [LocaleString, string | null]));\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a description localization\n\t *\n\t * @param locale - The locale to set a description for\n\t * @param localizedDescription - The localized description for the given locale\n\t */\n\tpublic setDescriptionLocalization(locale: LocaleString, localizedDescription: string | null) {\n\t\tif (!this.description_localizations) {\n\t\t\tReflect.set(this, 'description_localizations', {});\n\t\t}\n\n\t\tconst parsedLocale = validateLocale(locale);\n\n\t\tif (localizedDescription === null) {\n\t\t\tthis.description_localizations![parsedLocale] = null;\n\t\t\treturn this;\n\t\t}\n\n\t\tvalidateDescription(localizedDescription);\n\n\t\tthis.description_localizations![parsedLocale] = localizedDescription;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the description localizations\n\t *\n\t * @param localizedDescriptions - The dictionary of localized descriptions to set\n\t */\n\tpublic setDescriptionLocalizations(localizedDescriptions: LocalizationMap | null) {\n\t\tif (localizedDescriptions === null) {\n\t\t\tReflect.set(this, 'description_localizations', null);\n\t\t\treturn this;\n\t\t}\n\n\t\tReflect.set(this, 'description_localizations', {});\n\t\tfor (const args of Object.entries(localizedDescriptions)) {\n\t\t\tthis.setDescriptionLocalization(...(args as [LocaleString, string | null]));\n\t\t}\n\n\t\treturn this;\n\t}\n}\n","import { ApplicationCommandOptionType, type APIApplicationCommandAttachmentOption } from 'discord-api-types/v10';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\n\nexport class SlashCommandAttachmentOption extends ApplicationCommandOptionBase {\n\tpublic override readonly type = ApplicationCommandOptionType.Attachment as const;\n\n\tpublic toJSON(): APIApplicationCommandAttachmentOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n","import type { APIApplicationCommandBasicOption, ApplicationCommandOptionType } from 'discord-api-types/v10';\nimport { validateRequiredParameters, validateRequired, validateLocalizationMap } from '../Assertions.js';\nimport { SharedNameAndDescription } from './NameAndDescription.js';\n\nexport abstract class ApplicationCommandOptionBase extends SharedNameAndDescription {\n\tpublic abstract readonly type: ApplicationCommandOptionType;\n\n\tpublic readonly required: boolean = false;\n\n\t/**\n\t * Marks the option as required\n\t *\n\t * @param required - If this option should be required\n\t */\n\tpublic setRequired(required: boolean) {\n\t\t// Assert that you actually passed a boolean\n\t\tvalidateRequired(required);\n\n\t\tReflect.set(this, 'required', required);\n\n\t\treturn this;\n\t}\n\n\tpublic abstract toJSON(): APIApplicationCommandBasicOption;\n\n\tprotected runRequiredValidations() {\n\t\tvalidateRequiredParameters(this.name, this.description, []);\n\n\t\t// Validate localizations\n\t\tvalidateLocalizationMap(this.name_localizations);\n\t\tvalidateLocalizationMap(this.description_localizations);\n\n\t\t// Assert that you actually passed a boolean\n\t\tvalidateRequired(this.required);\n\t}\n}\n","import { ApplicationCommandOptionType, type APIApplicationCommandBooleanOption } from 'discord-api-types/v10';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\n\nexport class SlashCommandBooleanOption extends ApplicationCommandOptionBase {\n\tpublic readonly type = ApplicationCommandOptionType.Boolean as const;\n\n\tpublic toJSON(): APIApplicationCommandBooleanOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n","import { ApplicationCommandOptionType, type APIApplicationCommandChannelOption } from 'discord-api-types/v10';\nimport { mix } from 'ts-mixer';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\nimport { ApplicationCommandOptionChannelTypesMixin } from '../mixins/ApplicationCommandOptionChannelTypesMixin.js';\n\n@mix(ApplicationCommandOptionChannelTypesMixin)\nexport class SlashCommandChannelOption extends ApplicationCommandOptionBase {\n\tpublic override readonly type = ApplicationCommandOptionType.Channel as const;\n\n\tpublic toJSON(): APIApplicationCommandChannelOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n\nexport interface SlashCommandChannelOption extends ApplicationCommandOptionChannelTypesMixin {}\n","import { s } from '@sapphire/shapeshift';\nimport { ChannelType } from 'discord-api-types/v10';\n\n// Only allow valid channel types to be used. (This can't be dynamic because const enums are erased at runtime)\nconst allowedChannelTypes = [\n\tChannelType.GuildText,\n\tChannelType.GuildVoice,\n\tChannelType.GuildCategory,\n\tChannelType.GuildAnnouncement,\n\tChannelType.AnnouncementThread,\n\tChannelType.PublicThread,\n\tChannelType.PrivateThread,\n\tChannelType.GuildStageVoice,\n\tChannelType.GuildForum,\n] as const;\n\nexport type ApplicationCommandOptionAllowedChannelTypes = (typeof allowedChannelTypes)[number];\n\nconst channelTypesPredicate = s.array(s.union(...allowedChannelTypes.map((type) => s.literal(type))));\n\nexport class ApplicationCommandOptionChannelTypesMixin {\n\tpublic readonly channel_types?: ApplicationCommandOptionAllowedChannelTypes[];\n\n\t/**\n\t * Adds channel types to this option\n\t *\n\t * @param channelTypes - The channel types to add\n\t */\n\tpublic addChannelTypes(...channelTypes: ApplicationCommandOptionAllowedChannelTypes[]) {\n\t\tif (this.channel_types === undefined) {\n\t\t\tReflect.set(this, 'channel_types', []);\n\t\t}\n\n\t\tthis.channel_types!.push(...channelTypesPredicate.parse(channelTypes));\n\n\t\treturn this;\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { ApplicationCommandOptionType, type APIApplicationCommandIntegerOption } from 'discord-api-types/v10';\nimport { mix } from 'ts-mixer';\nimport { ApplicationCommandNumericOptionMinMaxValueMixin } from '../mixins/ApplicationCommandNumericOptionMinMaxValueMixin.js';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\nimport { ApplicationCommandOptionWithChoicesAndAutocompleteMixin } from '../mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin.js';\n\nconst numberValidator = s.number.int;\n\n@mix(ApplicationCommandNumericOptionMinMaxValueMixin, ApplicationCommandOptionWithChoicesAndAutocompleteMixin)\nexport class SlashCommandIntegerOption\n\textends ApplicationCommandOptionBase\n\timplements ApplicationCommandNumericOptionMinMaxValueMixin\n{\n\tpublic readonly type = ApplicationCommandOptionType.Integer as const;\n\n\t/**\n\t * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMaxValue}\n\t */\n\tpublic setMaxValue(max: number): this {\n\t\tnumberValidator.parse(max);\n\n\t\tReflect.set(this, 'max_value', max);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMinValue}\n\t */\n\tpublic setMinValue(min: number): this {\n\t\tnumberValidator.parse(min);\n\n\t\tReflect.set(this, 'min_value', min);\n\n\t\treturn this;\n\t}\n\n\tpublic toJSON(): APIApplicationCommandIntegerOption {\n\t\tthis.runRequiredValidations();\n\n\t\tif (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\treturn { ...this };\n\t}\n}\n\nexport interface SlashCommandIntegerOption\n\textends ApplicationCommandNumericOptionMinMaxValueMixin,\n\t\tApplicationCommandOptionWithChoicesAndAutocompleteMixin<number> {}\n","export abstract class ApplicationCommandNumericOptionMinMaxValueMixin {\n\tpublic readonly max_value?: number;\n\n\tpublic readonly min_value?: number;\n\n\t/**\n\t * Sets the maximum number value of this option\n\t *\n\t * @param max - The maximum value this option can be\n\t */\n\tpublic abstract setMaxValue(max: number): this;\n\n\t/**\n\t * Sets the minimum number value of this option\n\t *\n\t * @param min - The minimum value this option can be\n\t */\n\tpublic abstract setMinValue(min: number): this;\n}\n","import { s } from '@sapphire/shapeshift';\nimport { ApplicationCommandOptionType, type APIApplicationCommandOptionChoice } from 'discord-api-types/v10';\nimport { localizationMapPredicate, validateChoicesLength } from '../Assertions.js';\n\nconst stringPredicate = s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100);\nconst numberPredicate = s.number.greaterThan(Number.NEGATIVE_INFINITY).lessThan(Number.POSITIVE_INFINITY);\nconst choicesPredicate = s.object({\n\tname: stringPredicate,\n\tname_localizations: localizationMapPredicate,\n\tvalue: s.union(stringPredicate, numberPredicate),\n}).array;\nconst booleanPredicate = s.boolean;\n\nexport class ApplicationCommandOptionWithChoicesAndAutocompleteMixin<T extends number | string> {\n\tpublic readonly choices?: APIApplicationCommandOptionChoice<T>[];\n\n\tpublic readonly autocomplete?: boolean;\n\n\t// Since this is present and this is a mixin, this is needed\n\tpublic readonly type!: ApplicationCommandOptionType;\n\n\t/**\n\t * Adds multiple choices for this option\n\t *\n\t * @param choices - The choices to add\n\t */\n\tpublic addChoices(...choices: APIApplicationCommandOptionChoice<T>[]): this {\n\t\tif (choices.length > 0 && this.autocomplete) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\tchoicesPredicate.parse(choices);\n\n\t\tif (this.choices === undefined) {\n\t\t\tReflect.set(this, 'choices', []);\n\t\t}\n\n\t\tvalidateChoicesLength(choices.length, this.choices);\n\n\t\tfor (const { name, name_localizations, value } of choices) {\n\t\t\t// Validate the value\n\t\t\tif (this.type === ApplicationCommandOptionType.String) {\n\t\t\t\tstringPredicate.parse(value);\n\t\t\t} else {\n\t\t\t\tnumberPredicate.parse(value);\n\t\t\t}\n\n\t\t\tthis.choices!.push({ name, name_localizations, value });\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tpublic setChoices<Input extends APIApplicationCommandOptionChoice<T>[]>(...choices: Input): this {\n\t\tif (choices.length > 0 && this.autocomplete) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\tchoicesPredicate.parse(choices);\n\n\t\tReflect.set(this, 'choices', []);\n\t\tthis.addChoices(...choices);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Marks the option as autocompletable\n\t *\n\t * @param autocomplete - If this option should be autocompletable\n\t */\n\tpublic setAutocomplete(autocomplete: boolean): this {\n\t\t// Assert that you actually passed a boolean\n\t\tbooleanPredicate.parse(autocomplete);\n\n\t\tif (autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\tReflect.set(this, 'autocomplete', autocomplete);\n\n\t\treturn this;\n\t}\n}\n","import { ApplicationCommandOptionType, type APIApplicationCommandMentionableOption } from 'discord-api-types/v10';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\n\nexport class SlashCommandMentionableOption extends ApplicationCommandOptionBase {\n\tpublic readonly type = ApplicationCommandOptionType.Mentionable as const;\n\n\tpublic toJSON(): APIApplicationCommandMentionableOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { ApplicationCommandOptionType, type APIApplicationCommandNumberOption } from 'discord-api-types/v10';\nimport { mix } from 'ts-mixer';\nimport { ApplicationCommandNumericOptionMinMaxValueMixin } from '../mixins/ApplicationCommandNumericOptionMinMaxValueMixin.js';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\nimport { ApplicationCommandOptionWithChoicesAndAutocompleteMixin } from '../mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin.js';\n\nconst numberValidator = s.number;\n\n@mix(ApplicationCommandNumericOptionMinMaxValueMixin, ApplicationCommandOptionWithChoicesAndAutocompleteMixin)\nexport class SlashCommandNumberOption\n\textends ApplicationCommandOptionBase\n\timplements ApplicationCommandNumericOptionMinMaxValueMixin\n{\n\tpublic readonly type = ApplicationCommandOptionType.Number as const;\n\n\t/**\n\t * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMaxValue}\n\t */\n\tpublic setMaxValue(max: number): this {\n\t\tnumberValidator.parse(max);\n\n\t\tReflect.set(this, 'max_value', max);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMinValue}\n\t */\n\tpublic setMinValue(min: number): this {\n\t\tnumberValidator.parse(min);\n\n\t\tReflect.set(this, 'min_value', min);\n\n\t\treturn this;\n\t}\n\n\tpublic toJSON(): APIApplicationCommandNumberOption {\n\t\tthis.runRequiredValidations();\n\n\t\tif (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\treturn { ...this };\n\t}\n}\n\nexport interface SlashCommandNumberOption\n\textends ApplicationCommandNumericOptionMinMaxValueMixin,\n\t\tApplicationCommandOptionWithChoicesAndAutocompleteMixin<number> {}\n","import { ApplicationCommandOptionType, type APIApplicationCommandRoleOption } from 'discord-api-types/v10';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\n\nexport class SlashCommandRoleOption extends ApplicationCommandOptionBase {\n\tpublic override readonly type = ApplicationCommandOptionType.Role as const;\n\n\tpublic toJSON(): APIApplicationCommandRoleOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { ApplicationCommandOptionType, type APIApplicationCommandStringOption } from 'discord-api-types/v10';\nimport { mix } from 'ts-mixer';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\nimport { ApplicationCommandOptionWithChoicesAndAutocompleteMixin } from '../mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin.js';\n\nconst minLengthValidator = s.number.greaterThanOrEqual(0).lessThanOrEqual(6_000);\nconst maxLengthValidator = s.number.greaterThanOrEqual(1).lessThanOrEqual(6_000);\n\n@mix(ApplicationCommandOptionWithChoicesAndAutocompleteMixin)\nexport class SlashCommandStringOption extends ApplicationCommandOptionBase {\n\tpublic readonly type = ApplicationCommandOptionType.String as const;\n\n\tpublic readonly max_length?: number;\n\n\tpublic readonly min_length?: number;\n\n\t/**\n\t * Sets the maximum length of this string option.\n\t *\n\t * @param max - The maximum length this option can be\n\t */\n\tpublic setMaxLength(max: number): this {\n\t\tmaxLengthValidator.parse(max);\n\n\t\tReflect.set(this, 'max_length', max);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the minimum length of this string option.\n\t *\n\t * @param min - The minimum length this option can be\n\t */\n\tpublic setMinLength(min: number): this {\n\t\tminLengthValidator.parse(min);\n\n\t\tReflect.set(this, 'min_length', min);\n\n\t\treturn this;\n\t}\n\n\tpublic toJSON(): APIApplicationCommandStringOption {\n\t\tthis.runRequiredValidations();\n\n\t\tif (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\treturn { ...this };\n\t}\n}\n\nexport interface SlashCommandStringOption extends ApplicationCommandOptionWithChoicesAndAutocompleteMixin<string> {}\n","import { ApplicationCommandOptionType, type APIApplicationCommandUserOption } from 'discord-api-types/v10';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\n\nexport class SlashCommandUserOption extends ApplicationCommandOptionBase {\n\tpublic readonly type = ApplicationCommandOptionType.User as const;\n\n\tpublic toJSON(): APIApplicationCommandUserOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n","import { assertReturnOfBuilder, validateMaxOptionsLength } from '../Assertions.js';\nimport type { ToAPIApplicationCommandOptions } from '../SlashCommandBuilder';\nimport { SlashCommandAttachmentOption } from '../options/attachment.js';\nimport { SlashCommandBooleanOption } from '../options/boolean.js';\nimport { SlashCommandChannelOption } from '../options/channel.js';\nimport { SlashCommandIntegerOption } from '../options/integer.js';\nimport { SlashCommandMentionableOption } from '../options/mentionable.js';\nimport { SlashCommandNumberOption } from '../options/number.js';\nimport { SlashCommandRoleOption } from '../options/role.js';\nimport { SlashCommandStringOption } from '../options/string.js';\nimport { SlashCommandUserOption } from '../options/user.js';\nimport type { ApplicationCommandOptionBase } from './ApplicationCommandOptionBase.js';\n\nexport class SharedSlashCommandOptions<ShouldOmitSubcommandFunctions = true> {\n\tpublic readonly options!: ToAPIApplicationCommandOptions[];\n\n\t/**\n\t * Adds a boolean option\n\t *\n\t * @param input - A function that returns an option builder, or an already built builder\n\t */\n\tpublic addBooleanOption(\n\t\tinput: SlashCommandBooleanOption | ((builder: SlashCommandBooleanOption) => SlashCommandBooleanOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandBooleanOption);\n\t}\n\n\t/**\n\t * Adds a user option\n\t *\n\t * @param input - A function that returns an option builder, or an already built builder\n\t */\n\tpublic addUserOption(input: SlashCommandUserOption | ((builder: SlashCommandUserOption) => SlashCommandUserOption)) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandUserOption);\n\t}\n\n\t/**\n\t * Adds a channel option\n\t *\n\t * @param input - A function that returns an option builder, or an already built builder\n\t */\n\tpublic addChannelOption(\n\t\tinput: SlashCommandChannelOption | ((builder: SlashCommandChannelOption) => SlashCommandChannelOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandChannelOption);\n\t}\n\n\t/**\n\t * Adds a role option\n\t *\n\t * @param input - A function that returns an option builder, or an already built builder\n\t */\n\tpublic addRoleOption(input: SlashCommandRoleOption | ((builder: SlashCommandRoleOption) => SlashCommandRoleOption)) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandRoleOption);\n\t}\n\n\t/**\n\t * Adds an attachment option\n\t *\n\t * @param input - A function that returns an option builder, or an already built builder\n\t */\n\tpublic addAttachmentOption(\n\t\tinput: SlashCommandAttachmentOption | ((builder: SlashCommandAttachmentOption) => SlashCommandAttachmentOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandAttachmentOption);\n\t}\n\n\t/**\n\t * Adds a mentionable option\n\t *\n\t * @param input - A function that returns an option builder, or an already built builder\n\t */\n\tpublic addMentionableOption(\n\t\tinput: SlashCommandMentionableOption | ((builder: SlashCommandMentionableOption) => SlashCommandMentionableOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandMentionableOption);\n\t}\n\n\t/**\n\t * Adds a string option\n\t *\n\t * @param input - A function that returns an option builder, or an already built builder\n\t */\n\tpublic addStringOption(\n\t\tinput:\n\t\t\t| Omit<SlashCommandStringOption, 'addChoices'>\n\t\t\t| Omit<SlashCommandStringOption, 'setAutocomplete'>\n\t\t\t| SlashCommandStringOption\n\t\t\t| ((\n\t\t\t\t\tbuilder: SlashCommandStringOption,\n\t\t\t  ) =>\n\t\t\t\t\t| Omit<SlashCommandStringOption, 'addChoices'>\n\t\t\t\t\t| Omit<SlashCommandStringOption, 'setAutocomplete'>\n\t\t\t\t\t| SlashCommandStringOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandStringOption);\n\t}\n\n\t/**\n\t * Adds an integer option\n\t *\n\t * @param input - A function that returns an option builder, or an already built builder\n\t */\n\tpublic addIntegerOption(\n\t\tinput:\n\t\t\t| Omit<SlashCommandIntegerOption, 'addChoices'>\n\t\t\t| Omit<SlashCommandIntegerOption, 'setAutocomplete'>\n\t\t\t| SlashCommandIntegerOption\n\t\t\t| ((\n\t\t\t\t\tbuilder: SlashCommandIntegerOption,\n\t\t\t  ) =>\n\t\t\t\t\t| Omit<SlashCommandIntegerOption, 'addChoices'>\n\t\t\t\t\t| Omit<SlashCommandIntegerOption, 'setAutocomplete'>\n\t\t\t\t\t| SlashCommandIntegerOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandIntegerOption);\n\t}\n\n\t/**\n\t * Adds a number option\n\t *\n\t * @param input - A function that returns an option builder, or an already built builder\n\t */\n\tpublic addNumberOption(\n\t\tinput:\n\t\t\t| Omit<SlashCommandNumberOption, 'addChoices'>\n\t\t\t| Omit<SlashCommandNumberOption, 'setAutocomplete'>\n\t\t\t| SlashCommandNumberOption\n\t\t\t| ((\n\t\t\t\t\tbuilder: SlashCommandNumberOption,\n\t\t\t  ) =>\n\t\t\t\t\t| Omit<SlashCommandNumberOption, 'addChoices'>\n\t\t\t\t\t| Omit<SlashCommandNumberOption, 'setAutocomplete'>\n\t\t\t\t\t| SlashCommandNumberOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandNumberOption);\n\t}\n\n\tprivate _sharedAddOptionMethod<T extends ApplicationCommandOptionBase>(\n\t\tinput:\n\t\t\t| Omit<T, 'addChoices'>\n\t\t\t| Omit<T, 'setAutocomplete'>\n\t\t\t| T\n\t\t\t| ((builder: T) => Omit<T, 'addChoices'> | Omit<T, 'setAutocomplete'> | T),\n\t\tInstance: new () => T,\n\t): ShouldOmitSubcommandFunctions extends true ? Omit<this, 'addSubcommand' | 'addSubcommandGroup'> : this {\n\t\tconst { options } = this;\n\n\t\t// First, assert options conditions - we cannot have more than 25 options\n\t\tvalidateMaxOptionsLength(options);\n\n\t\t// Get the final result\n\t\tconst result = typeof input === 'function' ? input(new Instance()) : input;\n\n\t\tassertReturnOfBuilder(result, Instance);\n\n\t\t// Push it\n\t\toptions.push(result);\n\n\t\treturn this;\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { ApplicationCommandType } from 'discord-api-types/v10';\nimport { isValidationEnabled } from '../../util/validation.js';\nimport type { ContextMenuCommandType } from './ContextMenuCommandBuilder.js';\n\nconst namePredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(32)\n\t// eslint-disable-next-line prefer-named-capture-group, unicorn/no-unsafe-regex\n\t.regex(/^( *[\\p{P}\\p{L}\\p{N}\\p{sc=Devanagari}\\p{sc=Thai}]+ *)+$/u)\n\t.setValidationEnabled(isValidationEnabled);\nconst typePredicate = s\n\t.union(s.literal(ApplicationCommandType.User), s.literal(ApplicationCommandType.Message))\n\t.setValidationEnabled(isValidationEnabled);\nconst booleanPredicate = s.boolean;\n\nexport function validateDefaultPermission(value: unknown): asserts value is boolean {\n\tbooleanPredicate.parse(value);\n}\n\nexport function validateName(name: unknown): asserts name is string {\n\tnamePredicate.parse(name);\n}\n\nexport function validateType(type: unknown): asserts type is ContextMenuCommandType {\n\ttypePredicate.parse(type);\n}\n\nexport function validateRequiredParameters(name: string, type: number) {\n\t// Assert name matches all conditions\n\tvalidateName(name);\n\n\t// Assert type is valid\n\tvalidateType(type);\n}\n\nconst dmPermissionPredicate = s.boolean.nullish;\n\nexport function validateDMPermission(value: unknown): asserts value is boolean | null | undefined {\n\tdmPermissionPredicate.parse(value);\n}\n\nconst memberPermissionPredicate = s.union(\n\ts.bigint.transform((value) => value.toString()),\n\ts.number.safeInt.transform((value) => value.toString()),\n\ts.string.regex(/^\\d+$/),\n).nullish;\n\nexport function validateDefaultMemberPermissions(permissions: unknown) {\n\treturn memberPermissionPredicate.parse(permissions);\n}\n","import type {\n\tApplicationCommandType,\n\tLocaleString,\n\tLocalizationMap,\n\tPermissions,\n\tRESTPostAPIContextMenuApplicationCommandsJSONBody,\n} from 'discord-api-types/v10';\nimport { validateLocale, validateLocalizationMap } from '../slashCommands/Assertions.js';\nimport {\n\tvalidateRequiredParameters,\n\tvalidateName,\n\tvalidateType,\n\tvalidateDefaultPermission,\n\tvalidateDefaultMemberPermissions,\n\tvalidateDMPermission,\n} from './Assertions.js';\n\nexport class ContextMenuCommandBuilder {\n\t/**\n\t * The name of this context menu command\n\t */\n\tpublic readonly name: string = undefined!;\n\n\t/**\n\t * The localized names for this command\n\t */\n\tpublic readonly name_localizations?: LocalizationMap;\n\n\t/**\n\t * The type of this context menu command\n\t */\n\tpublic readonly type: ContextMenuCommandType = undefined!;\n\n\t/**\n\t * Whether the command is enabled by default when the app is added to a guild\n\t *\n\t * @deprecated This property is deprecated and will be removed in the future.\n\t * You should use {@link ContextMenuCommandBuilder.setDefaultMemberPermissions} or {@link ContextMenuCommandBuilder.setDMPermission} instead.\n\t */\n\tpublic readonly default_permission: boolean | undefined = undefined;\n\n\t/**\n\t * Set of permissions represented as a bit set for the command\n\t */\n\tpublic readonly default_member_permissions: Permissions | null | undefined = undefined;\n\n\t/**\n\t * Indicates whether the command is available in DMs with the application, only for globally-scoped commands.\n\t * By default, commands are visible.\n\t */\n\tpublic readonly dm_permission: boolean | undefined = undefined;\n\n\t/**\n\t * Sets the name\n\t *\n\t * @param name - The name\n\t */\n\tpublic setName(name: string) {\n\t\t// Assert the name matches the conditions\n\t\tvalidateName(name);\n\n\t\tReflect.set(this, 'name', name);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the type\n\t *\n\t * @param type - The type\n\t */\n\tpublic setType(type: ContextMenuCommandType) {\n\t\t// Assert the type is valid\n\t\tvalidateType(type);\n\n\t\tReflect.set(this, 'type', type);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets whether the command is enabled by default when the application is added to a guild.\n\t *\n\t * @remarks\n\t * If set to `false`, you will have to later `PUT` the permissions for this command.\n\t * @param value - Whether or not to enable this command by default\n\t * @see https://discord.com/developers/docs/interactions/application-commands#permissions\n\t * @deprecated Use {@link ContextMenuCommandBuilder.setDefaultMemberPermissions} or {@link ContextMenuCommandBuilder.setDMPermission} instead.\n\t */\n\tpublic setDefaultPermission(value: boolean) {\n\t\t// Assert the value matches the conditions\n\t\tvalidateDefaultPermission(value);\n\n\t\tReflect.set(this, 'default_permission', value);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the default permissions a member should have in order to run the command.\n\t *\n\t * @remarks\n\t * You can set this to `'0'` to disable the command by default.\n\t * @param permissions - The permissions bit field to set\n\t * @see https://discord.com/developers/docs/interactions/application-commands#permissions\n\t */\n\tpublic setDefaultMemberPermissions(permissions: Permissions | bigint | number | null | undefined) {\n\t\t// Assert the value and parse it\n\t\tconst permissionValue = validateDefaultMemberPermissions(permissions);\n\n\t\tReflect.set(this, 'default_member_permissions', permissionValue);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets if the command is available in DMs with the application, only for globally-scoped commands.\n\t * By default, commands are visible.\n\t *\n\t * @param enabled - If the command should be enabled in DMs\n\t * @see https://discord.com/developers/docs/interactions/application-commands#permissions\n\t */\n\tpublic setDMPermission(enabled: boolean | null | undefined) {\n\t\t// Assert the value matches the conditions\n\t\tvalidateDMPermission(enabled);\n\n\t\tReflect.set(this, 'dm_permission', enabled);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a name localization\n\t *\n\t * @param locale - The locale to set a description for\n\t * @param localizedName - The localized description for the given locale\n\t */\n\tpublic setNameLocalization(locale: LocaleString, localizedName: string | null) {\n\t\tif (!this.name_localizations) {\n\t\t\tReflect.set(this, 'name_localizations', {});\n\t\t}\n\n\t\tconst parsedLocale = validateLocale(locale);\n\n\t\tif (localizedName === null) {\n\t\t\tthis.name_localizations![parsedLocale] = null;\n\t\t\treturn this;\n\t\t}\n\n\t\tvalidateName(localizedName);\n\n\t\tthis.name_localizations![parsedLocale] = localizedName;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the name localizations\n\t *\n\t * @param localizedNames - The dictionary of localized descriptions to set\n\t */\n\tpublic setNameLocalizations(localizedNames: LocalizationMap | null) {\n\t\tif (localizedNames === null) {\n\t\t\tReflect.set(this, 'name_localizations', null);\n\t\t\treturn this;\n\t\t}\n\n\t\tReflect.set(this, 'name_localizations', {});\n\n\t\tfor (const args of Object.entries(localizedNames))\n\t\t\tthis.setNameLocalization(...(args as [LocaleString, string | null]));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the final data that should be sent to Discord.\n\t *\n\t * @remarks\n\t * This method runs validations on the data before serializing it.\n\t * As such, it may throw an error if the data is invalid.\n\t */\n\tpublic toJSON(): RESTPostAPIContextMenuApplicationCommandsJSONBody {\n\t\tvalidateRequiredParameters(this.name, this.type);\n\n\t\tvalidateLocalizationMap(this.name_localizations);\n\n\t\treturn { ...this };\n\t}\n}\n\nexport type ContextMenuCommandType = ApplicationCommandType.Message | ApplicationCommandType.User;\n","import type { APIEmbed } from 'discord-api-types/v10';\n\nexport function embedLength(data: APIEmbed) {\n\treturn (\n\t\t(data.title?.length ?? 0) +\n\t\t(data.description?.length ?? 0) +\n\t\t(data.fields?.reduce((prev, curr) => prev + curr.name.length + curr.value.length, 0) ?? 0) +\n\t\t(data.footer?.text.length ?? 0) +\n\t\t(data.author?.name.length ?? 0)\n\t);\n}\n"],"mappings":"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","names":["Assertions_exports","validate","enableValidators","disableValidators","isValidationEnabled","fieldNamePredicate","s","string","lengthGreaterThanOrEqual","lengthLessThanOrEqual","setValidationEnabled","isValidationEnabled","fieldValuePredicate","fieldInlinePredicate","boolean","optional","embedFieldPredicate","object","name","value","inline","embedFieldsArrayPredicate","array","fieldLengthPredicate","number","lessThanOrEqual","validateFieldLength","amountAdding","fields","parse","length","authorNamePredicate","nullable","imageURLPredicate","url","allowedProtocols","nullish","urlPredicate","embedAuthorPredicate","iconURL","RGBPredicate","int","greaterThanOrEqual","colorPredicate","or","tuple","descriptionPredicate","footerTextPredicate","embedFooterPredicate","text","timestampPredicate","union","date","titlePredicate","normalizeArray","arr","Array","isArray","EmbedBuilder","data","timestamp","Date","toISOString","addFields","fields","normalizeArray","validateFieldLength","length","embedFieldsArrayPredicate","parse","push","spliceFields","index","deleteCount","splice","setFields","setAuthor","options","author","undefined","embedAuthorPredicate","name","url","icon_url","iconURL","setColor","color","colorPredicate","Array","isArray","red","green","blue","setDescription","description","descriptionPredicate","setFooter","footer","embedFooterPredicate","text","setImage","imageURLPredicate","image","setThumbnail","thumbnail","setTimestamp","now","timestampPredicate","setTitle","title","titlePredicate","setURL","urlPredicate","toJSON","Assertions_exports","import_shapeshift","StringSelectMenuOptionBuilder","data","setLabel","label","labelValueDescriptionValidator","parse","setValue","value","setDescription","description","setDefault","isDefault","default","defaultValidator","setEmoji","emoji","emojiValidator","toJSON","validateRequiredSelectMenuOptionParameters","customIdValidator","s","string","lengthGreaterThanOrEqual","lengthLessThanOrEqual","setValidationEnabled","isValidationEnabled","emojiValidator","object","id","name","animated","boolean","partial","strict","disabledValidator","buttonLabelValidator","buttonStyleValidator","nativeEnum","ButtonStyle","placeholderValidator","minMaxValidator","number","int","greaterThanOrEqual","lessThanOrEqual","labelValueDescriptionValidator","jsonOptionValidator","label","value","description","optional","emoji","default","optionValidator","instance","StringSelectMenuOptionBuilder","optionsValidator","array","optionsLengthValidator","validateRequiredSelectMenuParameters","options","customId","parse","defaultValidator","validateRequiredSelectMenuOptionParameters","channelTypesValidator","ChannelType","urlValidator","url","allowedProtocols","validateRequiredButtonParameters","style","RangeError","Link","import_v10","ComponentBuilder","data","import_v10","import_v10","ButtonBuilder","ComponentBuilder","data","type","ComponentType","Button","setStyle","style","buttonStyleValidator","parse","setURL","url","urlValidator","setCustomId","customId","custom_id","customIdValidator","setEmoji","emoji","emojiValidator","setDisabled","disabled","disabledValidator","setLabel","label","buttonLabelValidator","toJSON","validateRequiredButtonParameters","import_v10","BaseSelectMenuBuilder","ComponentBuilder","setPlaceholder","placeholder","data","placeholderValidator","parse","setMinValues","minValues","min_values","minMaxValidator","setMaxValues","maxValues","max_values","setCustomId","customId","custom_id","customIdValidator","setDisabled","disabled","disabledValidator","toJSON","ChannelSelectMenuBuilder","BaseSelectMenuBuilder","data","type","ComponentType","ChannelSelect","addChannelTypes","types","normalizeArray","channel_types","push","channelTypesValidator","parse","setChannelTypes","splice","length","toJSON","customIdValidator","custom_id","import_v10","MentionableSelectMenuBuilder","BaseSelectMenuBuilder","data","type","ComponentType","MentionableSelect","import_v10","RoleSelectMenuBuilder","BaseSelectMenuBuilder","data","type","ComponentType","RoleSelect","import_v10","StringSelectMenuBuilder","BaseSelectMenuBuilder","options","data","initData","type","ComponentType","StringSelect","map","option","StringSelectMenuOptionBuilder","addOptions","normalizeArray","optionsLengthValidator","parse","length","push","jsonOptionValidator","setOptions","spliceOptions","index","deleteCount","clone","splice","toJSON","validateRequiredSelectMenuParameters","custom_id","import_v10","UserSelectMenuBuilder","BaseSelectMenuBuilder","data","type","ComponentType","UserSelect","import_v10","Assertions_exports","placeholderValidator","import_shapeshift","import_v10","textInputStyleValidator","s","nativeEnum","TextInputStyle","minLengthValidator","number","int","greaterThanOrEqual","lessThanOrEqual","setValidationEnabled","isValidationEnabled","maxLengthValidator","requiredValidator","boolean","valueValidator","string","lengthLessThanOrEqual","placeholderValidator","labelValidator","lengthGreaterThanOrEqual","validateRequiredParameters","customId","style","label","customIdValidator","parse","TextInputBuilder","ComponentBuilder","data","type","ComponentType","TextInput","setCustomId","customId","custom_id","customIdValidator","parse","setLabel","label","labelValidator","setStyle","style","textInputStyleValidator","setMinLength","minLength","min_length","minLengthValidator","setMaxLength","maxLength","max_length","maxLengthValidator","setPlaceholder","placeholder","placeholderValidator","setValue","value","valueValidator","setRequired","required","requiredValidator","toJSON","validateRequiredParameters","equals","other","isJSONEncodable","isEqual","createComponentBuilder","data","ComponentBuilder","type","ComponentType","ActionRow","ActionRowBuilder","Button","ButtonBuilder","StringSelect","StringSelectMenuBuilder","TextInput","TextInputBuilder","UserSelect","UserSelectMenuBuilder","RoleSelect","RoleSelectMenuBuilder","MentionableSelect","MentionableSelectMenuBuilder","ChannelSelect","ChannelSelectMenuBuilder","Error","ActionRowBuilder","ComponentBuilder","components","data","type","ComponentType","ActionRow","map","component","createComponentBuilder","addComponents","push","normalizeArray","setComponents","splice","length","toJSON","Assertions_exports","validateRequiredParameters","import_shapeshift","titleValidator","s","string","lengthGreaterThanOrEqual","lengthLessThanOrEqual","setValidationEnabled","isValidationEnabled","componentsValidator","instance","ActionRowBuilder","array","validateRequiredParameters","customId","title","components","customIdValidator","parse","ModalBuilder","data","components","map","component","createComponentBuilder","setTitle","title","titleValidator","parse","setCustomId","customId","custom_id","customIdValidator","addComponents","push","normalizeArray","ActionRowBuilder","setComponents","splice","length","toJSON","validateRequiredParameters","Assertions_exports","validateRequiredParameters","import_shapeshift","import_v10","namePredicate","s","string","lengthGreaterThanOrEqual","lengthLessThanOrEqual","regex","setValidationEnabled","isValidationEnabled","validateName","name","parse","descriptionPredicate","localePredicate","nativeEnum","Locale","validateDescription","description","maxArrayLengthPredicate","unknown","array","validateLocale","locale","validateMaxOptionsLength","options","validateRequiredParameters","booleanPredicate","boolean","validateDefaultPermission","value","validateRequired","required","choicesLengthPredicate","number","lessThanOrEqual","validateChoicesLength","amountAdding","choices","length","assertReturnOfBuilder","input","ExpectedInstanceOf","instance","localizationMapPredicate","object","Object","fromEntries","values","map","nullish","strict","validateLocalizationMap","dmPermissionPredicate","validateDMPermission","memberPermissionPredicate","union","bigint","transform","toString","safeInt","validateDefaultMemberPermissions","permissions","validateNSFW","import_ts_mixer","import_v10","import_ts_mixer","SharedNameAndDescription","name","name_localizations","description","description_localizations","setName","validateName","Reflect","set","setDescription","validateDescription","setNameLocalization","locale","localizedName","parsedLocale","validateLocale","setNameLocalizations","localizedNames","args","Object","entries","setDescriptionLocalization","localizedDescription","setDescriptionLocalizations","localizedDescriptions","import_v10","ApplicationCommandOptionBase","SharedNameAndDescription","required","setRequired","validateRequired","Reflect","set","runRequiredValidations","validateRequiredParameters","name","description","validateLocalizationMap","name_localizations","description_localizations","SlashCommandAttachmentOption","ApplicationCommandOptionBase","type","ApplicationCommandOptionType","Attachment","toJSON","runRequiredValidations","import_v10","SlashCommandBooleanOption","ApplicationCommandOptionBase","type","ApplicationCommandOptionType","Boolean","toJSON","runRequiredValidations","import_v10","import_shapeshift","import_v10","allowedChannelTypes","ChannelType","GuildText","GuildVoice","GuildCategory","GuildAnnouncement","AnnouncementThread","PublicThread","PrivateThread","GuildStageVoice","GuildForum","channelTypesPredicate","s","array","union","map","type","literal","ApplicationCommandOptionChannelTypesMixin","channel_types","addChannelTypes","channelTypes","undefined","Reflect","set","push","parse","SlashCommandChannelOption","ApplicationCommandOptionBase","type","ApplicationCommandOptionType","Channel","toJSON","runRequiredValidations","mix","ApplicationCommandOptionChannelTypesMixin","import_shapeshift","import_v10","import_ts_mixer","ApplicationCommandNumericOptionMinMaxValueMixin","max_value","min_value","import_shapeshift","import_v10","stringPredicate","s","string","lengthGreaterThanOrEqual","lengthLessThanOrEqual","numberPredicate","number","greaterThan","Number","NEGATIVE_INFINITY","lessThan","POSITIVE_INFINITY","choicesPredicate","object","name","name_localizations","localizationMapPredicate","value","union","array","booleanPredicate","boolean","ApplicationCommandOptionWithChoicesAndAutocompleteMixin","choices","autocomplete","type","addChoices","length","RangeError","parse","undefined","Reflect","set","validateChoicesLength","ApplicationCommandOptionType","String","push","setChoices","setAutocomplete","Array","isArray","numberValidator","s","number","int","SlashCommandIntegerOption","ApplicationCommandOptionBase","type","ApplicationCommandOptionType","Integer","setMaxValue","max","parse","Reflect","set","setMinValue","min","toJSON","runRequiredValidations","autocomplete","Array","isArray","choices","length","RangeError","mix","ApplicationCommandNumericOptionMinMaxValueMixin","ApplicationCommandOptionWithChoicesAndAutocompleteMixin","import_v10","SlashCommandMentionableOption","ApplicationCommandOptionBase","type","ApplicationCommandOptionType","Mentionable","toJSON","runRequiredValidations","import_shapeshift","import_v10","import_ts_mixer","numberValidator","s","number","SlashCommandNumberOption","ApplicationCommandOptionBase","type","ApplicationCommandOptionType","Number","setMaxValue","max","parse","Reflect","set","setMinValue","min","toJSON","runRequiredValidations","autocomplete","Array","isArray","choices","length","RangeError","mix","ApplicationCommandNumericOptionMinMaxValueMixin","ApplicationCommandOptionWithChoicesAndAutocompleteMixin","import_v10","SlashCommandRoleOption","ApplicationCommandOptionBase","type","ApplicationCommandOptionType","Role","toJSON","runRequiredValidations","import_shapeshift","import_v10","import_ts_mixer","minLengthValidator","s","number","greaterThanOrEqual","lessThanOrEqual","maxLengthValidator","SlashCommandStringOption","ApplicationCommandOptionBase","type","ApplicationCommandOptionType","String","max_length","min_length","setMaxLength","max","parse","Reflect","set","setMinLength","min","toJSON","runRequiredValidations","autocomplete","Array","isArray","choices","length","RangeError","mix","ApplicationCommandOptionWithChoicesAndAutocompleteMixin","import_v10","SlashCommandUserOption","ApplicationCommandOptionBase","type","ApplicationCommandOptionType","User","toJSON","runRequiredValidations","SharedSlashCommandOptions","options","addBooleanOption","input","_sharedAddOptionMethod","SlashCommandBooleanOption","addUserOption","SlashCommandUserOption","addChannelOption","SlashCommandChannelOption","addRoleOption","SlashCommandRoleOption","addAttachmentOption","SlashCommandAttachmentOption","addMentionableOption","SlashCommandMentionableOption","addStringOption","SlashCommandStringOption","addIntegerOption","SlashCommandIntegerOption","addNumberOption","SlashCommandNumberOption","Instance","validateMaxOptionsLength","result","assertReturnOfBuilder","push","SlashCommandSubcommandGroupBuilder","name","undefined","description","options","addSubcommand","input","validateMaxOptionsLength","result","SlashCommandSubcommandBuilder","assertReturnOfBuilder","push","toJSON","validateRequiredParameters","type","ApplicationCommandOptionType","SubcommandGroup","name_localizations","description_localizations","map","option","mix","SharedNameAndDescription","Subcommand","SharedSlashCommandOptions","SlashCommandBuilder","name","undefined","name_localizations","description","description_localizations","options","default_permission","default_member_permissions","dm_permission","nsfw","toJSON","validateRequiredParameters","validateLocalizationMap","map","option","setDefaultPermission","value","validateDefaultPermission","Reflect","set","setDefaultMemberPermissions","permissions","permissionValue","validateDefaultMemberPermissions","setDMPermission","enabled","validateDMPermission","setNSFW","validateNSFW","addSubcommandGroup","input","validateMaxOptionsLength","result","SlashCommandSubcommandGroupBuilder","assertReturnOfBuilder","push","addSubcommand","SlashCommandSubcommandBuilder","mix","SharedSlashCommandOptions","SharedNameAndDescription","Assertions_exports","validateDMPermission","validateDefaultMemberPermissions","validateDefaultPermission","validateName","validateRequiredParameters","import_shapeshift","import_v10","namePredicate","s","string","lengthGreaterThanOrEqual","lengthLessThanOrEqual","regex","setValidationEnabled","isValidationEnabled","typePredicate","union","literal","ApplicationCommandType","User","Message","booleanPredicate","boolean","validateDefaultPermission","value","parse","validateName","name","validateType","type","validateRequiredParameters","dmPermissionPredicate","nullish","validateDMPermission","memberPermissionPredicate","bigint","transform","toString","number","safeInt","validateDefaultMemberPermissions","permissions","ContextMenuCommandBuilder","name","undefined","name_localizations","type","default_permission","default_member_permissions","dm_permission","setName","validateName","Reflect","set","setType","validateType","setDefaultPermission","value","validateDefaultPermission","setDefaultMemberPermissions","permissions","permissionValue","validateDefaultMemberPermissions","setDMPermission","enabled","validateDMPermission","setNameLocalization","locale","localizedName","parsedLocale","validateLocale","setNameLocalizations","localizedNames","args","Object","entries","toJSON","validateRequiredParameters","validateLocalizationMap","embedLength","data","title","length","description","fields","reduce","prev","curr","name","value","footer","text","author","version"]}